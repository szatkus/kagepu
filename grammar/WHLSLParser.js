// Generated from WHLSL/Spec/WHLSL.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var WHLSLListener = require('./WHLSLListener').WHLSLListener;
var WHLSLVisitor = require('./WHLSLVisitor').WHLSLVisitor;

var grammarFileName = "WHLSL.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003n\u0284\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0003",
    "\u0002\u0007\u0002t\n\u0002\f\u0002\u000e\u0002w\u000b\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0080\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u0086\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0097\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u00a3\n\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u00b3\n\n\f\n\u000e\n\u00b6\u000b\n\u0003\n\u0003",
    "\n\u0003\u000b\u0007\u000b\u00bb\n\u000b\f\u000b\u000e\u000b\u00be\u000b",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u00c4",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00cc\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u00d2\n\f\f\f\u000e",
    "\f\u00d5\u000b\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u00dc",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u00f1\n\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00f8\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00ff",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0106\n\u0010\u0005\u0010\u0108\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0110",
    "\n\u0011\f\u0011\u000e\u0011\u0113\u000b\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0117\n\u0011\u0003\u0012\u0007\u0012\u011a\n\u0012\f\u0012",
    "\u000e\u0012\u011d\u000b\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0121",
    "\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0125\n\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013\u012b\n\u0013\r\u0013",
    "\u000e\u0013\u012c\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0132",
    "\n\u0013\f\u0013\u000e\u0013\u0135\u000b\u0013\u0005\u0013\u0137\n\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0140\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0149",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017",
    "\u014f\n\u0017\f\u0017\u000e\u0017\u0152\u000b\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0158\n\u0017\u0005\u0017",
    "\u015a\n\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u015e\n\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0007\u001a\u0165",
    "\n\u001a\f\u001a\u000e\u001a\u0168\u000b\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u017c\n",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0185\n\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u018e\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0007\u001d\u0196\n\u001d\f\u001d\u000e\u001d\u0199",
    "\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u01a0\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01a9\n\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u01ad\n\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u01b1\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u01c7",
    "\n\"\f\"\u000e\"\u01ca\u000b\"\u0003#\u0007#\u01cd\n#\f#\u000e#\u01d0",
    "\u000b#\u0003#\u0003#\u0003#\u0005#\u01d5\n#\u0003#\u0003#\u0005#\u01d9",
    "\n#\u0003$\u0003$\u0003$\u0003$\u0005$\u01df\n$\u0003%\u0003%\u0003",
    "%\u0007%\u01e4\n%\f%\u000e%\u01e7\u000b%\u0003%\u0005%\u01ea\n%\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u01f1\n&\u0003\'\u0003\'\u0003",
    "(\u0003(\u0003(\u0005(\u01f8\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u0202\n)\u0003*\u0003*\u0003*\u0007*\u0207\n",
    "*\f*\u000e*\u020a\u000b*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0219\n+\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u021f\n,\f,\u000e,\u0222\u000b,\u0003-\u0003",
    "-\u0003.\u0003.\u0003.\u0003.\u0005.\u022a\n.\u0003/\u0003/\u00030\u0003",
    "0\u00030\u00070\u0231\n0\f0\u000e0\u0234\u000b0\u00031\u00031\u0003",
    "1\u00071\u0239\n1\f1\u000e1\u023c\u000b1\u00032\u00032\u00032\u0007",
    "2\u0241\n2\f2\u000e2\u0244\u000b2\u00033\u00073\u0247\n3\f3\u000e3\u024a",
    "\u000b3\u00033\u00033\u00034\u00034\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00055\u0258\n5\u00036\u00036\u00076\u025c\n",
    "6\f6\u000e6\u025f\u000b6\u00036\u00036\u00036\u00036\u00076\u0265\n",
    "6\f6\u000e6\u0268\u000b6\u00056\u026a\n6\u00037\u00037\u00037\u0003",
    "7\u00037\u00077\u0271\n7\f7\u000e7\u0274\u000b7\u00057\u0276\n7\u0003",
    "7\u00037\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u0280\n8\u0003",
    "9\u00039\u00039\u0002\u0002:\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnp\u0002\r\u0003\u0002mn\u0003\u0002KN\u0004\u0002\u0007\u0007",
    "\u0012\u001b\u0003\u0002\u001c\u001d\u0003\u0002\u001f#\u0004\u0002",
    "\u000f\u0010$\'\u0003\u0002()\u0003\u0002*+\u0004\u0002\r\r,-\u0007",
    "\u0002\r\r\u001c\u001d##*+.0\u0004\u000256HJ\u0002\u02b1\u0002u\u0003",
    "\u0002\u0002\u0002\u0004\u007f\u0003\u0002\u0002\u0002\u0006\u0085\u0003",
    "\u0002\u0002\u0002\b\u0096\u0003\u0002\u0002\u0002\n\u0098\u0003\u0002",
    "\u0002\u0002\f\u009d\u0003\u0002\u0002\u0002\u000e\u00a6\u0003\u0002",
    "\u0002\u0002\u0010\u00a8\u0003\u0002\u0002\u0002\u0012\u00ae\u0003\u0002",
    "\u0002\u0002\u0014\u00bc\u0003\u0002\u0002\u0002\u0016\u00c7\u0003\u0002",
    "\u0002\u0002\u0018\u00d8\u0003\u0002\u0002\u0002\u001a\u00dd\u0003\u0002",
    "\u0002\u0002\u001c\u00e6\u0003\u0002\u0002\u0002\u001e\u0107\u0003\u0002",
    "\u0002\u0002 \u0116\u0003\u0002\u0002\u0002\"\u011b\u0003\u0002\u0002",
    "\u0002$\u0136\u0003\u0002\u0002\u0002&\u0138\u0003\u0002\u0002\u0002",
    "(\u013f\u0003\u0002\u0002\u0002*\u0148\u0003\u0002\u0002\u0002,\u0159",
    "\u0003\u0002\u0002\u0002.\u015d\u0003\u0002\u0002\u00020\u015f\u0003",
    "\u0002\u0002\u00022\u0166\u0003\u0002\u0002\u00024\u0184\u0003\u0002",
    "\u0002\u00026\u0186\u0003\u0002\u0002\u00028\u018f\u0003\u0002\u0002",
    "\u0002:\u019f\u0003\u0002\u0002\u0002<\u01a4\u0003\u0002\u0002\u0002",
    ">\u01b5\u0003\u0002\u0002\u0002@\u01bb\u0003\u0002\u0002\u0002B\u01c2",
    "\u0003\u0002\u0002\u0002D\u01ce\u0003\u0002\u0002\u0002F\u01de\u0003",
    "\u0002\u0002\u0002H\u01e9\u0003\u0002\u0002\u0002J\u01f0\u0003\u0002",
    "\u0002\u0002L\u01f2\u0003\u0002\u0002\u0002N\u01f7\u0003\u0002\u0002",
    "\u0002P\u0201\u0003\u0002\u0002\u0002R\u0208\u0003\u0002\u0002\u0002",
    "T\u0218\u0003\u0002\u0002\u0002V\u021a\u0003\u0002\u0002\u0002X\u0223",
    "\u0003\u0002\u0002\u0002Z\u0225\u0003\u0002\u0002\u0002\\\u022b\u0003",
    "\u0002\u0002\u0002^\u022d\u0003\u0002\u0002\u0002`\u0235\u0003\u0002",
    "\u0002\u0002b\u023d\u0003\u0002\u0002\u0002d\u0248\u0003\u0002\u0002",
    "\u0002f\u024d\u0003\u0002\u0002\u0002h\u0257\u0003\u0002\u0002\u0002",
    "j\u0269\u0003\u0002\u0002\u0002l\u026b\u0003\u0002\u0002\u0002n\u027f",
    "\u0003\u0002\u0002\u0002p\u0281\u0003\u0002\u0002\u0002rt\u0005\u0004",
    "\u0003\u0002sr\u0003\u0002\u0002\u0002tw\u0003\u0002\u0002\u0002us\u0003",
    "\u0002\u0002\u0002uv\u0003\u0002\u0002\u0002vx\u0003\u0002\u0002\u0002",
    "wu\u0003\u0002\u0002\u0002xy\u0007\u0002\u0002\u0003y\u0003\u0003\u0002",
    "\u0002\u0002z\u0080\u0007\u0003\u0002\u0002{\u0080\u0005\u0010\t\u0002",
    "|\u0080\u0005\u0012\n\u0002}\u0080\u0005\u0016\f\u0002~\u0080\u0005",
    "\u001c\u000f\u0002\u007fz\u0003\u0002\u0002\u0002\u007f{\u0003\u0002",
    "\u0002\u0002\u007f|\u0003\u0002\u0002\u0002\u007f}\u0003\u0002\u0002",
    "\u0002\u007f~\u0003\u0002\u0002\u0002\u0080\u0005\u0003\u0002\u0002",
    "\u0002\u0081\u0086\u0005\b\u0005\u0002\u0082\u0086\u0005\n\u0006\u0002",
    "\u0083\u0086\u0005\f\u0007\u0002\u0084\u0086\u0005\u000e\b\u0002\u0085",
    "\u0081\u0003\u0002\u0002\u0002\u0085\u0082\u0003\u0002\u0002\u0002\u0085",
    "\u0083\u0003\u0002\u0002\u0002\u0085\u0084\u0003\u0002\u0002\u0002\u0086",
    "\u0007\u0003\u0002\u0002\u0002\u0087\u0097\u0007S\u0002\u0002\u0088",
    "\u0097\u0007T\u0002\u0002\u0089\u0097\u0007U\u0002\u0002\u008a\u0097",
    "\u0007V\u0002\u0002\u008b\u0097\u0007W\u0002\u0002\u008c\u0097\u0007",
    "X\u0002\u0002\u008d\u0097\u0007Y\u0002\u0002\u008e\u008f\u0007Z\u0002",
    "\u0002\u008f\u0097\u00075\u0002\u0002\u0090\u0097\u0007[\u0002\u0002",
    "\u0091\u0097\u0007\\\u0002\u0002\u0092\u0097\u0007]\u0002\u0002\u0093",
    "\u0097\u0007^\u0002\u0002\u0094\u0097\u0007_\u0002\u0002\u0095\u0097",
    "\u0007`\u0002\u0002\u0096\u0087\u0003\u0002\u0002\u0002\u0096\u0088",
    "\u0003\u0002\u0002\u0002\u0096\u0089\u0003\u0002\u0002\u0002\u0096\u008a",
    "\u0003\u0002\u0002\u0002\u0096\u008b\u0003\u0002\u0002\u0002\u0096\u008c",
    "\u0003\u0002\u0002\u0002\u0096\u008d\u0003\u0002\u0002\u0002\u0096\u008e",
    "\u0003\u0002\u0002\u0002\u0096\u0090\u0003\u0002\u0002\u0002\u0096\u0091",
    "\u0003\u0002\u0002\u0002\u0096\u0092\u0003\u0002\u0002\u0002\u0096\u0093",
    "\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002\u0002\u0002\u0096\u0095",
    "\u0003\u0002\u0002\u0002\u0097\t\u0003\u0002\u0002\u0002\u0098\u0099",
    "\u0007a\u0002\u0002\u0099\u009a\u0007\u0004\u0002\u0002\u009a\u009b",
    "\u00075\u0002\u0002\u009b\u009c\u0007\u0005\u0002\u0002\u009c\u000b",
    "\u0003\u0002\u0002\u0002\u009d\u009e\u0007b\u0002\u0002\u009e\u009f",
    "\u0007\u0004\u0002\u0002\u009f\u00a2\u0007m\u0002\u0002\u00a0\u00a1",
    "\u0007\u0006\u0002\u0002\u00a1\u00a3\u0007m\u0002\u0002\u00a2\u00a0",
    "\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3\u00a4",
    "\u0003\u0002\u0002\u0002\u00a4\u00a5\u0007\u0005\u0002\u0002\u00a5\r",
    "\u0003\u0002\u0002\u0002\u00a6\u00a7\u0007c\u0002\u0002\u00a7\u000f",
    "\u0003\u0002\u0002\u0002\u00a8\u00a9\u00078\u0002\u0002\u00a9\u00aa",
    "\u0007m\u0002\u0002\u00aa\u00ab\u0007\u0007\u0002\u0002\u00ab\u00ac",
    "\u0005$\u0013\u0002\u00ac\u00ad\u0007\u0003\u0002\u0002\u00ad\u0011",
    "\u0003\u0002\u0002\u0002\u00ae\u00af\u00077\u0002\u0002\u00af\u00b0",
    "\u0007m\u0002\u0002\u00b0\u00b4\u0007\b\u0002\u0002\u00b1\u00b3\u0005",
    "\u0014\u000b\u0002\u00b2\u00b1\u0003\u0002\u0002\u0002\u00b3\u00b6\u0003",
    "\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003",
    "\u0002\u0002\u0002\u00b5\u00b7\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003",
    "\u0002\u0002\u0002\u00b7\u00b8\u0007\t\u0002\u0002\u00b8\u0013\u0003",
    "\u0002\u0002\u0002\u00b9\u00bb\u0007l\u0002\u0002\u00ba\u00b9\u0003",
    "\u0002\u0002\u0002\u00bb\u00be\u0003\u0002\u0002\u0002\u00bc\u00ba\u0003",
    "\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd\u00bf\u0003",
    "\u0002\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00bf\u00c0\u0005",
    "$\u0013\u0002\u00c0\u00c3\u0007m\u0002\u0002\u00c1\u00c2\u0007\n\u0002",
    "\u0002\u00c2\u00c4\u0005\u0006\u0004\u0002\u00c3\u00c1\u0003\u0002\u0002",
    "\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002",
    "\u0002\u00c5\u00c6\u0007\u0003\u0002\u0002\u00c6\u0015\u0003\u0002\u0002",
    "\u0002\u00c7\u00c8\u00079\u0002\u0002\u00c8\u00cb\u0007m\u0002\u0002",
    "\u00c9\u00ca\u0007\n\u0002\u0002\u00ca\u00cc\u0005$\u0013\u0002\u00cb",
    "\u00c9\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00ce\u0007\b\u0002\u0002\u00ce",
    "\u00d3\u0005\u0018\r\u0002\u00cf\u00d0\u0007\u0006\u0002\u0002\u00d0",
    "\u00d2\u0005\u0018\r\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d2",
    "\u00d5\u0003\u0002\u0002\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d3",
    "\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d6\u0003\u0002\u0002\u0002\u00d5",
    "\u00d3\u0003\u0002\u0002\u0002\u00d6\u00d7\u0007\t\u0002\u0002\u00d7",
    "\u0017\u0003\u0002\u0002\u0002\u00d8\u00db\u0007m\u0002\u0002\u00d9",
    "\u00da\u0007\u0007\u0002\u0002\u00da\u00dc\u0005F$\u0002\u00db\u00d9",
    "\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u0019",
    "\u0003\u0002\u0002\u0002\u00dd\u00de\u0007R\u0002\u0002\u00de\u00df",
    "\u0007\u0004\u0002\u0002\u00df\u00e0\u00075\u0002\u0002\u00e0\u00e1",
    "\u0007\u0006\u0002\u0002\u00e1\u00e2\u00075\u0002\u0002\u00e2\u00e3",
    "\u0007\u0006\u0002\u0002\u00e3\u00e4\u00075\u0002\u0002\u00e4\u00e5",
    "\u0007\u0005\u0002\u0002\u00e5\u001b\u0003\u0002\u0002\u0002\u00e6\u00e7",
    "\u0005\u001e\u0010\u0002\u00e7\u00e8\u00050\u0019\u0002\u00e8\u001d",
    "\u0003\u0002\u0002\u0002\u00e9\u00f1\u0007O\u0002\u0002\u00ea\u00f1",
    "\u0007P\u0002\u0002\u00eb\u00ec\u0007\u000b\u0002\u0002\u00ec\u00ed",
    "\u0005\u001a\u000e\u0002\u00ed\u00ee\u0007\f\u0002\u0002\u00ee\u00ef",
    "\u0007Q\u0002\u0002\u00ef\u00f1\u0003\u0002\u0002\u0002\u00f0\u00e9",
    "\u0003\u0002\u0002\u0002\u00f0\u00ea\u0003\u0002\u0002\u0002\u00f0\u00eb",
    "\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2\u00f3",
    "\u0005$\u0013\u0002\u00f3\u00f4\u0007m\u0002\u0002\u00f4\u00f7\u0005",
    " \u0011\u0002\u00f5\u00f6\u0007\n\u0002\u0002\u00f6\u00f8\u0005\u0006",
    "\u0004\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002",
    "\u0002\u0002\u00f8\u0108\u0003\u0002\u0002\u0002\u00f9\u00fa\u0005$",
    "\u0013\u0002\u00fa\u00fb\t\u0002\u0002\u0002\u00fb\u00fe\u0005 \u0011",
    "\u0002\u00fc\u00fd\u0007\n\u0002\u0002\u00fd\u00ff\u0005\u0006\u0004",
    "\u0002\u00fe\u00fc\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002",
    "\u0002\u00ff\u0108\u0003\u0002\u0002\u0002\u0100\u0101\u0007:\u0002",
    "\u0002\u0101\u0102\u0005$\u0013\u0002\u0102\u0105\u0005 \u0011\u0002",
    "\u0103\u0104\u0007\n\u0002\u0002\u0104\u0106\u0005\u0006\u0004\u0002",
    "\u0105\u0103\u0003\u0002\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002",
    "\u0106\u0108\u0003\u0002\u0002\u0002\u0107\u00f0\u0003\u0002\u0002\u0002",
    "\u0107\u00f9\u0003\u0002\u0002\u0002\u0107\u0100\u0003\u0002\u0002\u0002",
    "\u0108\u001f\u0003\u0002\u0002\u0002\u0109\u010a\u0007\u0004\u0002\u0002",
    "\u010a\u0117\u0007\u0005\u0002\u0002\u010b\u010c\u0007\u0004\u0002\u0002",
    "\u010c\u0111\u0005\"\u0012\u0002\u010d\u010e\u0007\u0006\u0002\u0002",
    "\u010e\u0110\u0005\"\u0012\u0002\u010f\u010d\u0003\u0002\u0002\u0002",
    "\u0110\u0113\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002",
    "\u0113\u0111\u0003\u0002\u0002\u0002\u0114\u0115\u0007\u0005\u0002\u0002",
    "\u0115\u0117\u0003\u0002\u0002\u0002\u0116\u0109\u0003\u0002\u0002\u0002",
    "\u0116\u010b\u0003\u0002\u0002\u0002\u0117!\u0003\u0002\u0002\u0002",
    "\u0118\u011a\u0007l\u0002\u0002\u0119\u0118\u0003\u0002\u0002\u0002",
    "\u011a\u011d\u0003\u0002\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002",
    "\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011e\u0003\u0002\u0002\u0002",
    "\u011d\u011b\u0003\u0002\u0002\u0002\u011e\u0120\u0005$\u0013\u0002",
    "\u011f\u0121\u0007m\u0002\u0002\u0120\u011f\u0003\u0002\u0002\u0002",
    "\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0124\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0007\n\u0002\u0002\u0123\u0125\u0005\u0006\u0004\u0002",
    "\u0124\u0122\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002",
    "\u0125#\u0003\u0002\u0002\u0002\u0126\u0127\u0005&\u0014\u0002\u0127",
    "\u0128\u0007m\u0002\u0002\u0128\u012a\u0005,\u0017\u0002\u0129\u012b",
    "\u0005(\u0015\u0002\u012a\u0129\u0003\u0002\u0002\u0002\u012b\u012c",
    "\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0003\u0002\u0002\u0002\u012d\u0137\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0007m\u0002\u0002\u012f\u0133\u0005,\u0017\u0002\u0130\u0132\u0005",
    "*\u0016\u0002\u0131\u0130\u0003\u0002\u0002\u0002\u0132\u0135\u0003",
    "\u0002\u0002\u0002\u0133\u0131\u0003\u0002\u0002\u0002\u0133\u0134\u0003",
    "\u0002\u0002\u0002\u0134\u0137\u0003\u0002\u0002\u0002\u0135\u0133\u0003",
    "\u0002\u0002\u0002\u0136\u0126\u0003\u0002\u0002\u0002\u0136\u012e\u0003",
    "\u0002\u0002\u0002\u0137%\u0003\u0002\u0002\u0002\u0138\u0139\t\u0003",
    "\u0002\u0002\u0139\'\u0003\u0002\u0002\u0002\u013a\u0140\u0007\r\u0002",
    "\u0002\u013b\u0140\u0007\u000e\u0002\u0002\u013c\u013d\u0007\u000b\u0002",
    "\u0002\u013d\u013e\u00075\u0002\u0002\u013e\u0140\u0007\f\u0002\u0002",
    "\u013f\u013a\u0003\u0002\u0002\u0002\u013f\u013b\u0003\u0002\u0002\u0002",
    "\u013f\u013c\u0003\u0002\u0002\u0002\u0140)\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0007\r\u0002\u0002\u0142\u0149\u0005&\u0014\u0002\u0143",
    "\u0144\u0007\u000e\u0002\u0002\u0144\u0149\u0005&\u0014\u0002\u0145",
    "\u0146\u0007\u000b\u0002\u0002\u0146\u0147\u00075\u0002\u0002\u0147",
    "\u0149\u0007\f\u0002\u0002\u0148\u0141\u0003\u0002\u0002\u0002\u0148",
    "\u0143\u0003\u0002\u0002\u0002\u0148\u0145\u0003\u0002\u0002\u0002\u0149",
    "+\u0003\u0002\u0002\u0002\u014a\u014b\u0007\u000f\u0002\u0002\u014b",
    "\u0150\u0005.\u0018\u0002\u014c\u014d\u0007\u0006\u0002\u0002\u014d",
    "\u014f\u0005.\u0018\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014f",
    "\u0152\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u0153\u0003\u0002\u0002\u0002\u0152",
    "\u0150\u0003\u0002\u0002\u0002\u0153\u0154\u0007\u0010\u0002\u0002\u0154",
    "\u015a\u0003\u0002\u0002\u0002\u0155\u0156\u0007\u000f\u0002\u0002\u0156",
    "\u0158\u0007\u0010\u0002\u0002\u0157\u0155\u0003\u0002\u0002\u0002\u0157",
    "\u0158\u0003\u0002\u0002\u0002\u0158\u015a\u0003\u0002\u0002\u0002\u0159",
    "\u014a\u0003\u0002\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u015a",
    "-\u0003\u0002\u0002\u0002\u015b\u015e\u0005F$\u0002\u015c\u015e\u0007",
    "m\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015c\u0003",
    "\u0002\u0002\u0002\u015e/\u0003\u0002\u0002\u0002\u015f\u0160\u0007",
    "\b\u0002\u0002\u0160\u0161\u00052\u001a\u0002\u0161\u0162\u0007\t\u0002",
    "\u0002\u01621\u0003\u0002\u0002\u0002\u0163\u0165\u00054\u001b\u0002",
    "\u0164\u0163\u0003\u0002\u0002\u0002\u0165\u0168\u0003\u0002\u0002\u0002",
    "\u0166\u0164\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002",
    "\u01673\u0003\u0002\u0002\u0002\u0168\u0166\u0003\u0002\u0002\u0002",
    "\u0169\u0185\u00050\u0019\u0002\u016a\u0185\u00056\u001c\u0002\u016b",
    "\u0185\u00058\u001d\u0002\u016c\u0185\u0005<\u001f\u0002\u016d\u0185",
    "\u0005> \u0002\u016e\u016f\u0005@!\u0002\u016f\u0170\u0007\u0003\u0002",
    "\u0002\u0170\u0185\u0003\u0002\u0002\u0002\u0171\u0172\u0007>\u0002",
    "\u0002\u0172\u0185\u0007\u0003\u0002\u0002\u0173\u0174\u0007=\u0002",
    "\u0002\u0174\u0185\u0007\u0003\u0002\u0002\u0175\u0176\u0007B\u0002",
    "\u0002\u0176\u0185\u0007\u0003\u0002\u0002\u0177\u0178\u0007G\u0002",
    "\u0002\u0178\u0185\u0007\u0003\u0002\u0002\u0179\u017b\u0007F\u0002",
    "\u0002\u017a\u017c\u0005R*\u0002\u017b\u017a\u0003\u0002\u0002\u0002",
    "\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002",
    "\u017d\u0185\u0007\u0003\u0002\u0002\u017e\u017f\u0005B\"\u0002\u017f",
    "\u0180\u0007\u0003\u0002\u0002\u0180\u0185\u0003\u0002\u0002\u0002\u0181",
    "\u0182\u0005H%\u0002\u0182\u0183\u0007\u0003\u0002\u0002\u0183\u0185",
    "\u0003\u0002\u0002\u0002\u0184\u0169\u0003\u0002\u0002\u0002\u0184\u016a",
    "\u0003\u0002\u0002\u0002\u0184\u016b\u0003\u0002\u0002\u0002\u0184\u016c",
    "\u0003\u0002\u0002\u0002\u0184\u016d\u0003\u0002\u0002\u0002\u0184\u016e",
    "\u0003\u0002\u0002\u0002\u0184\u0171\u0003\u0002\u0002\u0002\u0184\u0173",
    "\u0003\u0002\u0002\u0002\u0184\u0175\u0003\u0002\u0002\u0002\u0184\u0177",
    "\u0003\u0002\u0002\u0002\u0184\u0179\u0003\u0002\u0002\u0002\u0184\u017e",
    "\u0003\u0002\u0002\u0002\u0184\u0181\u0003\u0002\u0002\u0002\u01855",
    "\u0003\u0002\u0002\u0002\u0186\u0187\u0007;\u0002\u0002\u0187\u0188",
    "\u0007\u0004\u0002\u0002\u0188\u0189\u0005R*\u0002\u0189\u018a\u0007",
    "\u0005\u0002\u0002\u018a\u018d\u00054\u001b\u0002\u018b\u018c\u0007",
    "<\u0002\u0002\u018c\u018e\u00054\u001b\u0002\u018d\u018b\u0003\u0002",
    "\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e7\u0003\u0002",
    "\u0002\u0002\u018f\u0190\u0007?\u0002\u0002\u0190\u0191\u0007\u0004",
    "\u0002\u0002\u0191\u0192\u0005R*\u0002\u0192\u0193\u0007\u0005\u0002",
    "\u0002\u0193\u0197\u0007\b\u0002\u0002\u0194\u0196\u0005:\u001e\u0002",
    "\u0195\u0194\u0003\u0002\u0002\u0002\u0196\u0199\u0003\u0002\u0002\u0002",
    "\u0197\u0195\u0003\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002",
    "\u0198\u019a\u0003\u0002\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002",
    "\u019a\u019b\u0007\t\u0002\u0002\u019b9\u0003\u0002\u0002\u0002\u019c",
    "\u019d\u0007@\u0002\u0002\u019d\u01a0\u0005F$\u0002\u019e\u01a0\u0007",
    "A\u0002\u0002\u019f\u019c\u0003\u0002\u0002\u0002\u019f\u019e\u0003",
    "\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0007",
    "\n\u0002\u0002\u01a2\u01a3\u00052\u001a\u0002\u01a3;\u0003\u0002\u0002",
    "\u0002\u01a4\u01a5\u0007C\u0002\u0002\u01a5\u01a8\u0007\u0004\u0002",
    "\u0002\u01a6\u01a9\u0005B\"\u0002\u01a7\u01a9\u0005H%\u0002\u01a8\u01a6",
    "\u0003\u0002\u0002\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0003\u0002\u0002\u0002\u01aa\u01ac\u0007\u0003\u0002\u0002\u01ab\u01ad",
    "\u0005R*\u0002\u01ac\u01ab\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003",
    "\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae\u01b0\u0007",
    "\u0003\u0002\u0002\u01af\u01b1\u0005R*\u0002\u01b0\u01af\u0003\u0002",
    "\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002",
    "\u0002\u0002\u01b2\u01b3\u0007\u0005\u0002\u0002\u01b3\u01b4\u00054",
    "\u001b\u0002\u01b4=\u0003\u0002\u0002\u0002\u01b5\u01b6\u0007D\u0002",
    "\u0002\u01b6\u01b7\u0007\u0004\u0002\u0002\u01b7\u01b8\u0005R*\u0002",
    "\u01b8\u01b9\u0007\u0005\u0002\u0002\u01b9\u01ba\u00054\u001b\u0002",
    "\u01ba?\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007E\u0002\u0002\u01bc",
    "\u01bd\u00054\u001b\u0002\u01bd\u01be\u0007D\u0002\u0002\u01be\u01bf",
    "\u0007\u0004\u0002\u0002\u01bf\u01c0\u0005R*\u0002\u01c0\u01c1\u0007",
    "\u0005\u0002\u0002\u01c1A\u0003\u0002\u0002\u0002\u01c2\u01c3\u0005",
    "$\u0013\u0002\u01c3\u01c8\u0005D#\u0002\u01c4\u01c5\u0007\u0006\u0002",
    "\u0002\u01c5\u01c7\u0005D#\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002",
    "\u01c7\u01ca\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002",
    "\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9C\u0003\u0002\u0002\u0002",
    "\u01ca\u01c8\u0003\u0002\u0002\u0002\u01cb\u01cd\u0007l\u0002\u0002",
    "\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cd\u01d0\u0003\u0002\u0002\u0002",
    "\u01ce\u01cc\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002",
    "\u01cf\u01d1\u0003\u0002\u0002\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002",
    "\u01d1\u01d4\u0007m\u0002\u0002\u01d2\u01d3\u0007\n\u0002\u0002\u01d3",
    "\u01d5\u0005\u0006\u0004\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d4",
    "\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d8\u0003\u0002\u0002\u0002\u01d6",
    "\u01d7\u0007\u0007\u0002\u0002\u01d7\u01d9\u0005T+\u0002\u01d8\u01d6",
    "\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9E",
    "\u0003\u0002\u0002\u0002\u01da\u01df\u0005p9\u0002\u01db\u01dc\u0007",
    "m\u0002\u0002\u01dc\u01dd\u0007\u0011\u0002\u0002\u01dd\u01df\u0007",
    "m\u0002\u0002\u01de\u01da\u0003\u0002\u0002\u0002\u01de\u01db\u0003",
    "\u0002\u0002\u0002\u01dfG\u0003\u0002\u0002\u0002\u01e0\u01e1\u0005",
    "J&\u0002\u01e1\u01e2\u0007\u0006\u0002\u0002\u01e2\u01e4\u0003\u0002",
    "\u0002\u0002\u01e3\u01e0\u0003\u0002\u0002\u0002\u01e4\u01e7\u0003\u0002",
    "\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002",
    "\u0002\u0002\u01e6\u01e8\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002",
    "\u0002\u0002\u01e8\u01ea\u0005J&\u0002\u01e9\u01e5\u0003\u0002\u0002",
    "\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01eaI\u0003\u0002\u0002",
    "\u0002\u01eb\u01ec\u0005d3\u0002\u01ec\u01ed\u0005L\'\u0002\u01ed\u01ee",
    "\u0005T+\u0002\u01ee\u01f1\u0003\u0002\u0002\u0002\u01ef\u01f1\u0005",
    "N(\u0002\u01f0\u01eb\u0003\u0002\u0002\u0002\u01f0\u01ef\u0003\u0002",
    "\u0002\u0002\u01f1K\u0003\u0002\u0002\u0002\u01f2\u01f3\t\u0004\u0002",
    "\u0002\u01f3M\u0003\u0002\u0002\u0002\u01f4\u01f5\t\u0005\u0002\u0002",
    "\u01f5\u01f8\u0005d3\u0002\u01f6\u01f8\u0005P)\u0002\u01f7\u01f4\u0003",
    "\u0002\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f8O\u0003",
    "\u0002\u0002\u0002\u01f9\u01fa\u0005j6\u0002\u01fa\u01fb\t\u0005\u0002",
    "\u0002\u01fb\u0202\u0003\u0002\u0002\u0002\u01fc\u0202\u0005l7\u0002",
    "\u01fd\u01fe\u0007\u0004\u0002\u0002\u01fe\u01ff\u0005R*\u0002\u01ff",
    "\u0200\u0007\u0005\u0002\u0002\u0200\u0202\u0003\u0002\u0002\u0002\u0201",
    "\u01f9\u0003\u0002\u0002\u0002\u0201\u01fc\u0003\u0002\u0002\u0002\u0201",
    "\u01fd\u0003\u0002\u0002\u0002\u0202Q\u0003\u0002\u0002\u0002\u0203",
    "\u0204\u0005T+\u0002\u0204\u0205\u0007\u0006\u0002\u0002\u0205\u0207",
    "\u0003\u0002\u0002\u0002\u0206\u0203\u0003\u0002\u0002\u0002\u0207\u020a",
    "\u0003\u0002\u0002\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0209",
    "\u0003\u0002\u0002\u0002\u0209\u020b\u0003\u0002\u0002\u0002\u020a\u0208",
    "\u0003\u0002\u0002\u0002\u020b\u020c\u0005T+\u0002\u020cS\u0003\u0002",
    "\u0002\u0002\u020d\u020e\u0005V,\u0002\u020e\u020f\u0007\u001e\u0002",
    "\u0002\u020f\u0210\u0005R*\u0002\u0210\u0211\u0007\n\u0002\u0002\u0211",
    "\u0212\u0005T+\u0002\u0212\u0219\u0003\u0002\u0002\u0002\u0213\u0214",
    "\u0005d3\u0002\u0214\u0215\u0005L\'\u0002\u0215\u0216\u0005T+\u0002",
    "\u0216\u0219\u0003\u0002\u0002\u0002\u0217\u0219\u0005V,\u0002\u0218",
    "\u020d\u0003\u0002\u0002\u0002\u0218\u0213\u0003\u0002\u0002\u0002\u0218",
    "\u0217\u0003\u0002\u0002\u0002\u0219U\u0003\u0002\u0002\u0002\u021a",
    "\u0220\u0005Z.\u0002\u021b\u021c\u0005X-\u0002\u021c\u021d\u0005Z.\u0002",
    "\u021d\u021f\u0003\u0002\u0002\u0002\u021e\u021b\u0003\u0002\u0002\u0002",
    "\u021f\u0222\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002\u0002\u0002",
    "\u0220\u0221\u0003\u0002\u0002\u0002\u0221W\u0003\u0002\u0002\u0002",
    "\u0222\u0220\u0003\u0002\u0002\u0002\u0223\u0224\t\u0006\u0002\u0002",
    "\u0224Y\u0003\u0002\u0002\u0002\u0225\u0229\u0005^0\u0002\u0226\u0227",
    "\u0005\\/\u0002\u0227\u0228\u0005^0\u0002\u0228\u022a\u0003\u0002\u0002",
    "\u0002\u0229\u0226\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002",
    "\u0002\u022a[\u0003\u0002\u0002\u0002\u022b\u022c\t\u0007\u0002\u0002",
    "\u022c]\u0003\u0002\u0002\u0002\u022d\u0232\u0005`1\u0002\u022e\u022f",
    "\t\b\u0002\u0002\u022f\u0231\u0005`1\u0002\u0230\u022e\u0003\u0002\u0002",
    "\u0002\u0231\u0234\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002",
    "\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233_\u0003\u0002\u0002",
    "\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0235\u023a\u0005b2\u0002",
    "\u0236\u0237\t\t\u0002\u0002\u0237\u0239\u0005b2\u0002\u0238\u0236\u0003",
    "\u0002\u0002\u0002\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238\u0003",
    "\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023ba\u0003",
    "\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0242\u0005",
    "d3\u0002\u023e\u023f\t\n\u0002\u0002\u023f\u0241\u0005d3\u0002\u0240",
    "\u023e\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002\u0242",
    "\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243",
    "c\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002\u0245",
    "\u0247\u0005f4\u0002\u0246\u0245\u0003\u0002\u0002\u0002\u0247\u024a",
    "\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0249",
    "\u0003\u0002\u0002\u0002\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0248",
    "\u0003\u0002\u0002\u0002\u024b\u024c\u0005j6\u0002\u024ce\u0003\u0002",
    "\u0002\u0002\u024d\u024e\t\u000b\u0002\u0002\u024eg\u0003\u0002\u0002",
    "\u0002\u024f\u0250\u0007\u0011\u0002\u0002\u0250\u0258\u0007m\u0002",
    "\u0002\u0251\u0252\u00071\u0002\u0002\u0252\u0258\u0007m\u0002\u0002",
    "\u0253\u0254\u0007\u000b\u0002\u0002\u0254\u0255\u0005R*\u0002\u0255",
    "\u0256\u0007\f\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257",
    "\u024f\u0003\u0002\u0002\u0002\u0257\u0251\u0003\u0002\u0002\u0002\u0257",
    "\u0253\u0003\u0002\u0002\u0002\u0258i\u0003\u0002\u0002\u0002\u0259",
    "\u025d\u0005l7\u0002\u025a\u025c\u0005h5\u0002\u025b\u025a\u0003\u0002",
    "\u0002\u0002\u025c\u025f\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002",
    "\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u026a\u0003\u0002",
    "\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u0260\u0266\u0005n",
    "8\u0002\u0261\u0265\u0005h5\u0002\u0262\u0265\u0007\u001c\u0002\u0002",
    "\u0263\u0265\u0007\u001d\u0002\u0002\u0264\u0261\u0003\u0002\u0002\u0002",
    "\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0263\u0003\u0002\u0002\u0002",
    "\u0265\u0268\u0003\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002",
    "\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u026a\u0003\u0002\u0002\u0002",
    "\u0268\u0266\u0003\u0002\u0002\u0002\u0269\u0259\u0003\u0002\u0002\u0002",
    "\u0269\u0260\u0003\u0002\u0002\u0002\u026ak\u0003\u0002\u0002\u0002",
    "\u026b\u026c\u0007m\u0002\u0002\u026c\u0275\u0007\u0004\u0002\u0002",
    "\u026d\u0272\u0005T+\u0002\u026e\u026f\u0007\u0006\u0002\u0002\u026f",
    "\u0271\u0005T+\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0271\u0274",
    "\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0272\u0273",
    "\u0003\u0002\u0002\u0002\u0273\u0276\u0003\u0002\u0002\u0002\u0274\u0272",
    "\u0003\u0002\u0002\u0002\u0275\u026d\u0003\u0002\u0002\u0002\u0275\u0276",
    "\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0278",
    "\u0007\u0005\u0002\u0002\u0278m\u0003\u0002\u0002\u0002\u0279\u0280",
    "\u0005p9\u0002\u027a\u0280\u0007m\u0002\u0002\u027b\u027c\u0007\u0004",
    "\u0002\u0002\u027c\u027d\u0005R*\u0002\u027d\u027e\u0007\u0005\u0002",
    "\u0002\u027e\u0280\u0003\u0002\u0002\u0002\u027f\u0279\u0003\u0002\u0002",
    "\u0002\u027f\u027a\u0003\u0002\u0002\u0002\u027f\u027b\u0003\u0002\u0002",
    "\u0002\u0280o\u0003\u0002\u0002\u0002\u0281\u0282\t\f\u0002\u0002\u0282",
    "q\u0003\u0002\u0002\u0002Cu\u007f\u0085\u0096\u00a2\u00b4\u00bc\u00c3",
    "\u00cb\u00d3\u00db\u00f0\u00f7\u00fe\u0105\u0107\u0111\u0116\u011b\u0120",
    "\u0124\u012c\u0133\u0136\u013f\u0148\u0150\u0157\u0159\u015d\u0166\u017b",
    "\u0184\u018d\u0197\u019f\u01a8\u01ac\u01b0\u01c8\u01ce\u01d4\u01d8\u01de",
    "\u01e5\u01e9\u01f0\u01f7\u0201\u0208\u0218\u0220\u0229\u0232\u023a\u0242",
    "\u0248\u0257\u025d\u0264\u0266\u0269\u0272\u0275\u027f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'('", "')'", "','", "'='", "'{'", "'}'", 
                     "':'", "'['", "']'", "'*'", "'[]'", "'<'", "'>'", "'.'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", 
                     "'|='", "'>>='", "'<<='", "'++'", "'--'", "'?'", "'||'", 
                     "'&&'", "'|'", "'^'", "'&'", "'<='", "'>='", "'=='", 
                     "'!='", "'>>'", "'<<'", "'+'", "'-'", "'/'", "'%'", 
                     "'~'", "'!'", "'@'", "'->'", null, null, null, null, 
                     null, "'struct'", "'typedef'", "'enum'", "'operator'", 
                     "'if'", "'else'", "'continue'", "'break'", "'switch'", 
                     "'case'", "'default'", "'fallthrough'", "'for'", "'while'", 
                     "'do'", "'return'", "'trap'", "'null'", "'true'", "'false'", 
                     "'constant'", "'device'", "'threadgroup'", "'thread'", 
                     "'vertex'", "'fragment'", "'compute'", "'numthreads'", 
                     "'SV_InstanceID'", "'SV_VertexID'", "'PSIZE'", "'SV_Position'", 
                     "'SV_IsFrontFace'", "'SV_SampleIndex'", "'SV_InnerCoverage'", 
                     "'SV_Target'", "'SV_Depth'", "'SV_Coverage'", "'SV_DispatchThreadID'", 
                     "'SV_GroupID'", "'SV_GroupIndex'", "'SV_GroupThreadID'", 
                     "'attribute'", "'register'", "'specialized'", "'_'", 
                     "'auto'", "'protocol'", "'const'", "'static'", "'native'", 
                     "'restricted'", "'space'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, "Whitespace", "LineComment", "LongComment", 
                      "IntLiteral", "FloatLiteral", "STRUCT", "TYPEDEF", 
                      "ENUM", "OPERATOR", "IF", "ELSE", "CONTINUE", "BREAK", 
                      "SWITCH", "CASE", "DEFAULT", "FALLTHROUGHKEYWORD", 
                      "FOR", "WHILE", "DO", "RETURN", "TRAP", "NULLKEYWORD", 
                      "TRUEKEYWORD", "FALSEKEYWORD", "CONSTANT", "DEVICE", 
                      "THREADGROUP", "THREAD", "VERTEX", "FRAGMENT", "COMPUTE", 
                      "NUMTHREADS", "SVINSTANCEID", "SVVERTEXID", "PSIZE", 
                      "SVPOSITION", "SVISFRONTFACE", "SVSAMPLEINDEX", "SVINNERCOVERAGE", 
                      "SVTARGET", "SVDEPTH", "SVCOVERAGE", "SVDISPATCHTHREADID", 
                      "SVGROUPID", "SVGROUPINDEX", "SVGROUPTHREADID", "ATTRIBUTE", 
                      "REGISTER", "SPECIALIZED", "UNDERSCORE", "AUTO", "PROTOCOL", 
                      "CONST", "STATIC", "NATIVE", "RESTRICTED", "SPACEKEYWORD", 
                      "Qualifier", "Identifier", "OperatorName" ];

var ruleNames =  [ "file", "topLevelDecl", "semantic", "builtInSemantic", 
                   "stageInOutSemantic", "resourceSemantic", "specializationConstantSemantic", 
                   "typeDef", "structDef", "structElement", "enumDef", "enumMember", 
                   "numthreadsSemantic", "funcDef", "funcDecl", "parameters", 
                   "parameter", "type", "addressSpace", "typeSuffixAbbreviated", 
                   "typeSuffixNonAbbreviated", "typeArguments", "typeArgument", 
                   "block", "blockBody", "stmt", "ifStmt", "switchStmt", 
                   "switchCase", "forStmt", "whileStmt", "doStmt", "variableDecls", 
                   "variableDecl", "constexpression", "effectfulExpr", "effAssignment", 
                   "assignOperator", "effPrefix", "effSuffix", "expr", "possibleTernaryConditional", 
                   "possibleLogicalBinop", "logicalBinop", "possibleRelationalBinop", 
                   "relationalBinop", "possibleShift", "possibleAdd", "possibleMult", 
                   "possiblePrefix", "prefixOp", "limitedSuffixOperator", 
                   "possibleSuffix", "callExpression", "term", "literal" ];

function WHLSLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

WHLSLParser.prototype = Object.create(antlr4.Parser.prototype);
WHLSLParser.prototype.constructor = WHLSLParser;

Object.defineProperty(WHLSLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

WHLSLParser.EOF = antlr4.Token.EOF;
WHLSLParser.T__0 = 1;
WHLSLParser.T__1 = 2;
WHLSLParser.T__2 = 3;
WHLSLParser.T__3 = 4;
WHLSLParser.T__4 = 5;
WHLSLParser.T__5 = 6;
WHLSLParser.T__6 = 7;
WHLSLParser.T__7 = 8;
WHLSLParser.T__8 = 9;
WHLSLParser.T__9 = 10;
WHLSLParser.T__10 = 11;
WHLSLParser.T__11 = 12;
WHLSLParser.T__12 = 13;
WHLSLParser.T__13 = 14;
WHLSLParser.T__14 = 15;
WHLSLParser.T__15 = 16;
WHLSLParser.T__16 = 17;
WHLSLParser.T__17 = 18;
WHLSLParser.T__18 = 19;
WHLSLParser.T__19 = 20;
WHLSLParser.T__20 = 21;
WHLSLParser.T__21 = 22;
WHLSLParser.T__22 = 23;
WHLSLParser.T__23 = 24;
WHLSLParser.T__24 = 25;
WHLSLParser.T__25 = 26;
WHLSLParser.T__26 = 27;
WHLSLParser.T__27 = 28;
WHLSLParser.T__28 = 29;
WHLSLParser.T__29 = 30;
WHLSLParser.T__30 = 31;
WHLSLParser.T__31 = 32;
WHLSLParser.T__32 = 33;
WHLSLParser.T__33 = 34;
WHLSLParser.T__34 = 35;
WHLSLParser.T__35 = 36;
WHLSLParser.T__36 = 37;
WHLSLParser.T__37 = 38;
WHLSLParser.T__38 = 39;
WHLSLParser.T__39 = 40;
WHLSLParser.T__40 = 41;
WHLSLParser.T__41 = 42;
WHLSLParser.T__42 = 43;
WHLSLParser.T__43 = 44;
WHLSLParser.T__44 = 45;
WHLSLParser.T__45 = 46;
WHLSLParser.T__46 = 47;
WHLSLParser.Whitespace = 48;
WHLSLParser.LineComment = 49;
WHLSLParser.LongComment = 50;
WHLSLParser.IntLiteral = 51;
WHLSLParser.FloatLiteral = 52;
WHLSLParser.STRUCT = 53;
WHLSLParser.TYPEDEF = 54;
WHLSLParser.ENUM = 55;
WHLSLParser.OPERATOR = 56;
WHLSLParser.IF = 57;
WHLSLParser.ELSE = 58;
WHLSLParser.CONTINUE = 59;
WHLSLParser.BREAK = 60;
WHLSLParser.SWITCH = 61;
WHLSLParser.CASE = 62;
WHLSLParser.DEFAULT = 63;
WHLSLParser.FALLTHROUGHKEYWORD = 64;
WHLSLParser.FOR = 65;
WHLSLParser.WHILE = 66;
WHLSLParser.DO = 67;
WHLSLParser.RETURN = 68;
WHLSLParser.TRAP = 69;
WHLSLParser.NULLKEYWORD = 70;
WHLSLParser.TRUEKEYWORD = 71;
WHLSLParser.FALSEKEYWORD = 72;
WHLSLParser.CONSTANT = 73;
WHLSLParser.DEVICE = 74;
WHLSLParser.THREADGROUP = 75;
WHLSLParser.THREAD = 76;
WHLSLParser.VERTEX = 77;
WHLSLParser.FRAGMENT = 78;
WHLSLParser.COMPUTE = 79;
WHLSLParser.NUMTHREADS = 80;
WHLSLParser.SVINSTANCEID = 81;
WHLSLParser.SVVERTEXID = 82;
WHLSLParser.PSIZE = 83;
WHLSLParser.SVPOSITION = 84;
WHLSLParser.SVISFRONTFACE = 85;
WHLSLParser.SVSAMPLEINDEX = 86;
WHLSLParser.SVINNERCOVERAGE = 87;
WHLSLParser.SVTARGET = 88;
WHLSLParser.SVDEPTH = 89;
WHLSLParser.SVCOVERAGE = 90;
WHLSLParser.SVDISPATCHTHREADID = 91;
WHLSLParser.SVGROUPID = 92;
WHLSLParser.SVGROUPINDEX = 93;
WHLSLParser.SVGROUPTHREADID = 94;
WHLSLParser.ATTRIBUTE = 95;
WHLSLParser.REGISTER = 96;
WHLSLParser.SPECIALIZED = 97;
WHLSLParser.UNDERSCORE = 98;
WHLSLParser.AUTO = 99;
WHLSLParser.PROTOCOL = 100;
WHLSLParser.CONST = 101;
WHLSLParser.STATIC = 102;
WHLSLParser.NATIVE = 103;
WHLSLParser.RESTRICTED = 104;
WHLSLParser.SPACEKEYWORD = 105;
WHLSLParser.Qualifier = 106;
WHLSLParser.Identifier = 107;
WHLSLParser.OperatorName = 108;

WHLSLParser.RULE_file = 0;
WHLSLParser.RULE_topLevelDecl = 1;
WHLSLParser.RULE_semantic = 2;
WHLSLParser.RULE_builtInSemantic = 3;
WHLSLParser.RULE_stageInOutSemantic = 4;
WHLSLParser.RULE_resourceSemantic = 5;
WHLSLParser.RULE_specializationConstantSemantic = 6;
WHLSLParser.RULE_typeDef = 7;
WHLSLParser.RULE_structDef = 8;
WHLSLParser.RULE_structElement = 9;
WHLSLParser.RULE_enumDef = 10;
WHLSLParser.RULE_enumMember = 11;
WHLSLParser.RULE_numthreadsSemantic = 12;
WHLSLParser.RULE_funcDef = 13;
WHLSLParser.RULE_funcDecl = 14;
WHLSLParser.RULE_parameters = 15;
WHLSLParser.RULE_parameter = 16;
WHLSLParser.RULE_type = 17;
WHLSLParser.RULE_addressSpace = 18;
WHLSLParser.RULE_typeSuffixAbbreviated = 19;
WHLSLParser.RULE_typeSuffixNonAbbreviated = 20;
WHLSLParser.RULE_typeArguments = 21;
WHLSLParser.RULE_typeArgument = 22;
WHLSLParser.RULE_block = 23;
WHLSLParser.RULE_blockBody = 24;
WHLSLParser.RULE_stmt = 25;
WHLSLParser.RULE_ifStmt = 26;
WHLSLParser.RULE_switchStmt = 27;
WHLSLParser.RULE_switchCase = 28;
WHLSLParser.RULE_forStmt = 29;
WHLSLParser.RULE_whileStmt = 30;
WHLSLParser.RULE_doStmt = 31;
WHLSLParser.RULE_variableDecls = 32;
WHLSLParser.RULE_variableDecl = 33;
WHLSLParser.RULE_constexpression = 34;
WHLSLParser.RULE_effectfulExpr = 35;
WHLSLParser.RULE_effAssignment = 36;
WHLSLParser.RULE_assignOperator = 37;
WHLSLParser.RULE_effPrefix = 38;
WHLSLParser.RULE_effSuffix = 39;
WHLSLParser.RULE_expr = 40;
WHLSLParser.RULE_possibleTernaryConditional = 41;
WHLSLParser.RULE_possibleLogicalBinop = 42;
WHLSLParser.RULE_logicalBinop = 43;
WHLSLParser.RULE_possibleRelationalBinop = 44;
WHLSLParser.RULE_relationalBinop = 45;
WHLSLParser.RULE_possibleShift = 46;
WHLSLParser.RULE_possibleAdd = 47;
WHLSLParser.RULE_possibleMult = 48;
WHLSLParser.RULE_possiblePrefix = 49;
WHLSLParser.RULE_prefixOp = 50;
WHLSLParser.RULE_limitedSuffixOperator = 51;
WHLSLParser.RULE_possibleSuffix = 52;
WHLSLParser.RULE_callExpression = 53;
WHLSLParser.RULE_term = 54;
WHLSLParser.RULE_literal = 55;


function FileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_file;
    return this;
}

FileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileContext.prototype.constructor = FileContext;

FileContext.prototype.EOF = function() {
    return this.getToken(WHLSLParser.EOF, 0);
};

FileContext.prototype.topLevelDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelDeclContext);
    } else {
        return this.getTypedRuleContext(TopLevelDeclContext,i);
    }
};

FileContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterFile(this);
	}
};

FileContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitFile(this);
	}
};

FileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitFile(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.FileContext = FileContext;

WHLSLParser.prototype.file = function() {

    var localctx = new FileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, WHLSLParser.RULE_file);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__0 || _la===WHLSLParser.T__8 || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (WHLSLParser.STRUCT - 53)) | (1 << (WHLSLParser.TYPEDEF - 53)) | (1 << (WHLSLParser.ENUM - 53)) | (1 << (WHLSLParser.OPERATOR - 53)) | (1 << (WHLSLParser.CONSTANT - 53)) | (1 << (WHLSLParser.DEVICE - 53)) | (1 << (WHLSLParser.THREADGROUP - 53)) | (1 << (WHLSLParser.THREAD - 53)) | (1 << (WHLSLParser.VERTEX - 53)) | (1 << (WHLSLParser.FRAGMENT - 53)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 112;
            this.topLevelDecl();
            this.state = 117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 118;
        this.match(WHLSLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_topLevelDecl;
    return this;
}

TopLevelDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelDeclContext.prototype.constructor = TopLevelDeclContext;

TopLevelDeclContext.prototype.typeDef = function() {
    return this.getTypedRuleContext(TypeDefContext,0);
};

TopLevelDeclContext.prototype.structDef = function() {
    return this.getTypedRuleContext(StructDefContext,0);
};

TopLevelDeclContext.prototype.enumDef = function() {
    return this.getTypedRuleContext(EnumDefContext,0);
};

TopLevelDeclContext.prototype.funcDef = function() {
    return this.getTypedRuleContext(FuncDefContext,0);
};

TopLevelDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTopLevelDecl(this);
	}
};

TopLevelDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTopLevelDecl(this);
	}
};

TopLevelDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTopLevelDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TopLevelDeclContext = TopLevelDeclContext;

WHLSLParser.prototype.topLevelDecl = function() {

    var localctx = new TopLevelDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, WHLSLParser.RULE_topLevelDecl);
    try {
        this.state = 125;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 120;
            this.match(WHLSLParser.T__0);
            break;
        case WHLSLParser.TYPEDEF:
            this.enterOuterAlt(localctx, 2);
            this.state = 121;
            this.typeDef();
            break;
        case WHLSLParser.STRUCT:
            this.enterOuterAlt(localctx, 3);
            this.state = 122;
            this.structDef();
            break;
        case WHLSLParser.ENUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 123;
            this.enumDef();
            break;
        case WHLSLParser.T__8:
        case WHLSLParser.OPERATOR:
        case WHLSLParser.CONSTANT:
        case WHLSLParser.DEVICE:
        case WHLSLParser.THREADGROUP:
        case WHLSLParser.THREAD:
        case WHLSLParser.VERTEX:
        case WHLSLParser.FRAGMENT:
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 5);
            this.state = 124;
            this.funcDef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_semantic;
    return this;
}

SemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SemanticContext.prototype.constructor = SemanticContext;

SemanticContext.prototype.builtInSemantic = function() {
    return this.getTypedRuleContext(BuiltInSemanticContext,0);
};

SemanticContext.prototype.stageInOutSemantic = function() {
    return this.getTypedRuleContext(StageInOutSemanticContext,0);
};

SemanticContext.prototype.resourceSemantic = function() {
    return this.getTypedRuleContext(ResourceSemanticContext,0);
};

SemanticContext.prototype.specializationConstantSemantic = function() {
    return this.getTypedRuleContext(SpecializationConstantSemanticContext,0);
};

SemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterSemantic(this);
	}
};

SemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitSemantic(this);
	}
};

SemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.SemanticContext = SemanticContext;

WHLSLParser.prototype.semantic = function() {

    var localctx = new SemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, WHLSLParser.RULE_semantic);
    try {
        this.state = 131;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.SVINSTANCEID:
        case WHLSLParser.SVVERTEXID:
        case WHLSLParser.PSIZE:
        case WHLSLParser.SVPOSITION:
        case WHLSLParser.SVISFRONTFACE:
        case WHLSLParser.SVSAMPLEINDEX:
        case WHLSLParser.SVINNERCOVERAGE:
        case WHLSLParser.SVTARGET:
        case WHLSLParser.SVDEPTH:
        case WHLSLParser.SVCOVERAGE:
        case WHLSLParser.SVDISPATCHTHREADID:
        case WHLSLParser.SVGROUPID:
        case WHLSLParser.SVGROUPINDEX:
        case WHLSLParser.SVGROUPTHREADID:
            this.enterOuterAlt(localctx, 1);
            this.state = 127;
            this.builtInSemantic();
            break;
        case WHLSLParser.ATTRIBUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 128;
            this.stageInOutSemantic();
            break;
        case WHLSLParser.REGISTER:
            this.enterOuterAlt(localctx, 3);
            this.state = 129;
            this.resourceSemantic();
            break;
        case WHLSLParser.SPECIALIZED:
            this.enterOuterAlt(localctx, 4);
            this.state = 130;
            this.specializationConstantSemantic();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BuiltInSemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_builtInSemantic;
    return this;
}

BuiltInSemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltInSemanticContext.prototype.constructor = BuiltInSemanticContext;

BuiltInSemanticContext.prototype.SVINSTANCEID = function() {
    return this.getToken(WHLSLParser.SVINSTANCEID, 0);
};

BuiltInSemanticContext.prototype.SVVERTEXID = function() {
    return this.getToken(WHLSLParser.SVVERTEXID, 0);
};

BuiltInSemanticContext.prototype.PSIZE = function() {
    return this.getToken(WHLSLParser.PSIZE, 0);
};

BuiltInSemanticContext.prototype.SVPOSITION = function() {
    return this.getToken(WHLSLParser.SVPOSITION, 0);
};

BuiltInSemanticContext.prototype.SVISFRONTFACE = function() {
    return this.getToken(WHLSLParser.SVISFRONTFACE, 0);
};

BuiltInSemanticContext.prototype.SVSAMPLEINDEX = function() {
    return this.getToken(WHLSLParser.SVSAMPLEINDEX, 0);
};

BuiltInSemanticContext.prototype.SVINNERCOVERAGE = function() {
    return this.getToken(WHLSLParser.SVINNERCOVERAGE, 0);
};

BuiltInSemanticContext.prototype.SVTARGET = function() {
    return this.getToken(WHLSLParser.SVTARGET, 0);
};

BuiltInSemanticContext.prototype.IntLiteral = function() {
    return this.getToken(WHLSLParser.IntLiteral, 0);
};

BuiltInSemanticContext.prototype.SVDEPTH = function() {
    return this.getToken(WHLSLParser.SVDEPTH, 0);
};

BuiltInSemanticContext.prototype.SVCOVERAGE = function() {
    return this.getToken(WHLSLParser.SVCOVERAGE, 0);
};

BuiltInSemanticContext.prototype.SVDISPATCHTHREADID = function() {
    return this.getToken(WHLSLParser.SVDISPATCHTHREADID, 0);
};

BuiltInSemanticContext.prototype.SVGROUPID = function() {
    return this.getToken(WHLSLParser.SVGROUPID, 0);
};

BuiltInSemanticContext.prototype.SVGROUPINDEX = function() {
    return this.getToken(WHLSLParser.SVGROUPINDEX, 0);
};

BuiltInSemanticContext.prototype.SVGROUPTHREADID = function() {
    return this.getToken(WHLSLParser.SVGROUPTHREADID, 0);
};

BuiltInSemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterBuiltInSemantic(this);
	}
};

BuiltInSemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitBuiltInSemantic(this);
	}
};

BuiltInSemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitBuiltInSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.BuiltInSemanticContext = BuiltInSemanticContext;

WHLSLParser.prototype.builtInSemantic = function() {

    var localctx = new BuiltInSemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, WHLSLParser.RULE_builtInSemantic);
    try {
        this.state = 148;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.SVINSTANCEID:
            this.enterOuterAlt(localctx, 1);
            this.state = 133;
            this.match(WHLSLParser.SVINSTANCEID);
            break;
        case WHLSLParser.SVVERTEXID:
            this.enterOuterAlt(localctx, 2);
            this.state = 134;
            this.match(WHLSLParser.SVVERTEXID);
            break;
        case WHLSLParser.PSIZE:
            this.enterOuterAlt(localctx, 3);
            this.state = 135;
            this.match(WHLSLParser.PSIZE);
            break;
        case WHLSLParser.SVPOSITION:
            this.enterOuterAlt(localctx, 4);
            this.state = 136;
            this.match(WHLSLParser.SVPOSITION);
            break;
        case WHLSLParser.SVISFRONTFACE:
            this.enterOuterAlt(localctx, 5);
            this.state = 137;
            this.match(WHLSLParser.SVISFRONTFACE);
            break;
        case WHLSLParser.SVSAMPLEINDEX:
            this.enterOuterAlt(localctx, 6);
            this.state = 138;
            this.match(WHLSLParser.SVSAMPLEINDEX);
            break;
        case WHLSLParser.SVINNERCOVERAGE:
            this.enterOuterAlt(localctx, 7);
            this.state = 139;
            this.match(WHLSLParser.SVINNERCOVERAGE);
            break;
        case WHLSLParser.SVTARGET:
            this.enterOuterAlt(localctx, 8);
            this.state = 140;
            this.match(WHLSLParser.SVTARGET);
            this.state = 141;
            this.match(WHLSLParser.IntLiteral);
            break;
        case WHLSLParser.SVDEPTH:
            this.enterOuterAlt(localctx, 9);
            this.state = 142;
            this.match(WHLSLParser.SVDEPTH);
            break;
        case WHLSLParser.SVCOVERAGE:
            this.enterOuterAlt(localctx, 10);
            this.state = 143;
            this.match(WHLSLParser.SVCOVERAGE);
            break;
        case WHLSLParser.SVDISPATCHTHREADID:
            this.enterOuterAlt(localctx, 11);
            this.state = 144;
            this.match(WHLSLParser.SVDISPATCHTHREADID);
            break;
        case WHLSLParser.SVGROUPID:
            this.enterOuterAlt(localctx, 12);
            this.state = 145;
            this.match(WHLSLParser.SVGROUPID);
            break;
        case WHLSLParser.SVGROUPINDEX:
            this.enterOuterAlt(localctx, 13);
            this.state = 146;
            this.match(WHLSLParser.SVGROUPINDEX);
            break;
        case WHLSLParser.SVGROUPTHREADID:
            this.enterOuterAlt(localctx, 14);
            this.state = 147;
            this.match(WHLSLParser.SVGROUPTHREADID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StageInOutSemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_stageInOutSemantic;
    return this;
}

StageInOutSemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StageInOutSemanticContext.prototype.constructor = StageInOutSemanticContext;

StageInOutSemanticContext.prototype.ATTRIBUTE = function() {
    return this.getToken(WHLSLParser.ATTRIBUTE, 0);
};

StageInOutSemanticContext.prototype.IntLiteral = function() {
    return this.getToken(WHLSLParser.IntLiteral, 0);
};

StageInOutSemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterStageInOutSemantic(this);
	}
};

StageInOutSemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitStageInOutSemantic(this);
	}
};

StageInOutSemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitStageInOutSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.StageInOutSemanticContext = StageInOutSemanticContext;

WHLSLParser.prototype.stageInOutSemantic = function() {

    var localctx = new StageInOutSemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, WHLSLParser.RULE_stageInOutSemantic);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 150;
        this.match(WHLSLParser.ATTRIBUTE);
        this.state = 151;
        this.match(WHLSLParser.T__1);
        this.state = 152;
        this.match(WHLSLParser.IntLiteral);
        this.state = 153;
        this.match(WHLSLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceSemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_resourceSemantic;
    return this;
}

ResourceSemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSemanticContext.prototype.constructor = ResourceSemanticContext;

ResourceSemanticContext.prototype.REGISTER = function() {
    return this.getToken(WHLSLParser.REGISTER, 0);
};

ResourceSemanticContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.Identifier);
    } else {
        return this.getToken(WHLSLParser.Identifier, i);
    }
};


ResourceSemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterResourceSemantic(this);
	}
};

ResourceSemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitResourceSemantic(this);
	}
};

ResourceSemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitResourceSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ResourceSemanticContext = ResourceSemanticContext;

WHLSLParser.prototype.resourceSemantic = function() {

    var localctx = new ResourceSemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, WHLSLParser.RULE_resourceSemantic);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 155;
        this.match(WHLSLParser.REGISTER);
        this.state = 156;
        this.match(WHLSLParser.T__1);
        this.state = 157;
        this.match(WHLSLParser.Identifier);
        this.state = 160;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__3) {
            this.state = 158;
            this.match(WHLSLParser.T__3);
            this.state = 159;
            this.match(WHLSLParser.Identifier);
        }

        this.state = 162;
        this.match(WHLSLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecializationConstantSemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_specializationConstantSemantic;
    return this;
}

SpecializationConstantSemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecializationConstantSemanticContext.prototype.constructor = SpecializationConstantSemanticContext;

SpecializationConstantSemanticContext.prototype.SPECIALIZED = function() {
    return this.getToken(WHLSLParser.SPECIALIZED, 0);
};

SpecializationConstantSemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterSpecializationConstantSemantic(this);
	}
};

SpecializationConstantSemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitSpecializationConstantSemantic(this);
	}
};

SpecializationConstantSemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitSpecializationConstantSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.SpecializationConstantSemanticContext = SpecializationConstantSemanticContext;

WHLSLParser.prototype.specializationConstantSemantic = function() {

    var localctx = new SpecializationConstantSemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, WHLSLParser.RULE_specializationConstantSemantic);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 164;
        this.match(WHLSLParser.SPECIALIZED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_typeDef;
    return this;
}

TypeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefContext.prototype.constructor = TypeDefContext;

TypeDefContext.prototype.TYPEDEF = function() {
    return this.getToken(WHLSLParser.TYPEDEF, 0);
};

TypeDefContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

TypeDefContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTypeDef(this);
	}
};

TypeDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTypeDef(this);
	}
};

TypeDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTypeDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeDefContext = TypeDefContext;

WHLSLParser.prototype.typeDef = function() {

    var localctx = new TypeDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, WHLSLParser.RULE_typeDef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166;
        this.match(WHLSLParser.TYPEDEF);
        this.state = 167;
        this.match(WHLSLParser.Identifier);
        this.state = 168;
        this.match(WHLSLParser.T__4);
        this.state = 169;
        this.type();
        this.state = 170;
        this.match(WHLSLParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_structDef;
    return this;
}

StructDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefContext.prototype.constructor = StructDefContext;

StructDefContext.prototype.STRUCT = function() {
    return this.getToken(WHLSLParser.STRUCT, 0);
};

StructDefContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

StructDefContext.prototype.structElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructElementContext);
    } else {
        return this.getTypedRuleContext(StructElementContext,i);
    }
};

StructDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterStructDef(this);
	}
};

StructDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitStructDef(this);
	}
};

StructDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitStructDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.StructDefContext = StructDefContext;

WHLSLParser.prototype.structDef = function() {

    var localctx = new StructDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, WHLSLParser.RULE_structDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 172;
        this.match(WHLSLParser.STRUCT);
        this.state = 173;
        this.match(WHLSLParser.Identifier);
        this.state = 174;
        this.match(WHLSLParser.T__5);
        this.state = 178;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (WHLSLParser.CONSTANT - 73)) | (1 << (WHLSLParser.DEVICE - 73)) | (1 << (WHLSLParser.THREADGROUP - 73)) | (1 << (WHLSLParser.THREAD - 73)))) !== 0) || _la===WHLSLParser.Qualifier || _la===WHLSLParser.Identifier) {
            this.state = 175;
            this.structElement();
            this.state = 180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 181;
        this.match(WHLSLParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_structElement;
    return this;
}

StructElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructElementContext.prototype.constructor = StructElementContext;

StructElementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

StructElementContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

StructElementContext.prototype.Qualifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.Qualifier);
    } else {
        return this.getToken(WHLSLParser.Qualifier, i);
    }
};


StructElementContext.prototype.semantic = function() {
    return this.getTypedRuleContext(SemanticContext,0);
};

StructElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterStructElement(this);
	}
};

StructElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitStructElement(this);
	}
};

StructElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitStructElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.StructElementContext = StructElementContext;

WHLSLParser.prototype.structElement = function() {

    var localctx = new StructElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, WHLSLParser.RULE_structElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.Qualifier) {
            this.state = 183;
            this.match(WHLSLParser.Qualifier);
            this.state = 188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 189;
        this.type();
        this.state = 190;
        this.match(WHLSLParser.Identifier);
        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__7) {
            this.state = 191;
            this.match(WHLSLParser.T__7);
            this.state = 192;
            this.semantic();
        }

        this.state = 195;
        this.match(WHLSLParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_enumDef;
    return this;
}

EnumDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefContext.prototype.constructor = EnumDefContext;

EnumDefContext.prototype.ENUM = function() {
    return this.getToken(WHLSLParser.ENUM, 0);
};

EnumDefContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

EnumDefContext.prototype.enumMember = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumMemberContext);
    } else {
        return this.getTypedRuleContext(EnumMemberContext,i);
    }
};

EnumDefContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnumDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEnumDef(this);
	}
};

EnumDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEnumDef(this);
	}
};

EnumDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEnumDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EnumDefContext = EnumDefContext;

WHLSLParser.prototype.enumDef = function() {

    var localctx = new EnumDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, WHLSLParser.RULE_enumDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.match(WHLSLParser.ENUM);
        this.state = 198;
        this.match(WHLSLParser.Identifier);
        this.state = 201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__7) {
            this.state = 199;
            this.match(WHLSLParser.T__7);
            this.state = 200;
            this.type();
        }

        this.state = 203;
        this.match(WHLSLParser.T__5);
        this.state = 204;
        this.enumMember();
        this.state = 209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__3) {
            this.state = 205;
            this.match(WHLSLParser.T__3);
            this.state = 206;
            this.enumMember();
            this.state = 211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 212;
        this.match(WHLSLParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumMemberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_enumMember;
    return this;
}

EnumMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumMemberContext.prototype.constructor = EnumMemberContext;

EnumMemberContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

EnumMemberContext.prototype.constexpression = function() {
    return this.getTypedRuleContext(ConstexpressionContext,0);
};

EnumMemberContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEnumMember(this);
	}
};

EnumMemberContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEnumMember(this);
	}
};

EnumMemberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEnumMember(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EnumMemberContext = EnumMemberContext;

WHLSLParser.prototype.enumMember = function() {

    var localctx = new EnumMemberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, WHLSLParser.RULE_enumMember);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this.match(WHLSLParser.Identifier);
        this.state = 217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__4) {
            this.state = 215;
            this.match(WHLSLParser.T__4);
            this.state = 216;
            this.constexpression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumthreadsSemanticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_numthreadsSemantic;
    return this;
}

NumthreadsSemanticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumthreadsSemanticContext.prototype.constructor = NumthreadsSemanticContext;

NumthreadsSemanticContext.prototype.NUMTHREADS = function() {
    return this.getToken(WHLSLParser.NUMTHREADS, 0);
};

NumthreadsSemanticContext.prototype.IntLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.IntLiteral);
    } else {
        return this.getToken(WHLSLParser.IntLiteral, i);
    }
};


NumthreadsSemanticContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterNumthreadsSemantic(this);
	}
};

NumthreadsSemanticContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitNumthreadsSemantic(this);
	}
};

NumthreadsSemanticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitNumthreadsSemantic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.NumthreadsSemanticContext = NumthreadsSemanticContext;

WHLSLParser.prototype.numthreadsSemantic = function() {

    var localctx = new NumthreadsSemanticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, WHLSLParser.RULE_numthreadsSemantic);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.match(WHLSLParser.NUMTHREADS);
        this.state = 220;
        this.match(WHLSLParser.T__1);
        this.state = 221;
        this.match(WHLSLParser.IntLiteral);
        this.state = 222;
        this.match(WHLSLParser.T__3);
        this.state = 223;
        this.match(WHLSLParser.IntLiteral);
        this.state = 224;
        this.match(WHLSLParser.T__3);
        this.state = 225;
        this.match(WHLSLParser.IntLiteral);
        this.state = 226;
        this.match(WHLSLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_funcDef;
    return this;
}

FuncDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncDefContext.prototype.constructor = FuncDefContext;

FuncDefContext.prototype.funcDecl = function() {
    return this.getTypedRuleContext(FuncDeclContext,0);
};

FuncDefContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FuncDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterFuncDef(this);
	}
};

FuncDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitFuncDef(this);
	}
};

FuncDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitFuncDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.FuncDefContext = FuncDefContext;

WHLSLParser.prototype.funcDef = function() {

    var localctx = new FuncDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, WHLSLParser.RULE_funcDef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 228;
        this.funcDecl();
        this.state = 229;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_funcDecl;
    return this;
}

FuncDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncDeclContext.prototype.constructor = FuncDeclContext;

FuncDeclContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FuncDeclContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

FuncDeclContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FuncDeclContext.prototype.VERTEX = function() {
    return this.getToken(WHLSLParser.VERTEX, 0);
};

FuncDeclContext.prototype.FRAGMENT = function() {
    return this.getToken(WHLSLParser.FRAGMENT, 0);
};

FuncDeclContext.prototype.semantic = function() {
    return this.getTypedRuleContext(SemanticContext,0);
};

FuncDeclContext.prototype.numthreadsSemantic = function() {
    return this.getTypedRuleContext(NumthreadsSemanticContext,0);
};

FuncDeclContext.prototype.COMPUTE = function() {
    return this.getToken(WHLSLParser.COMPUTE, 0);
};

FuncDeclContext.prototype.OperatorName = function() {
    return this.getToken(WHLSLParser.OperatorName, 0);
};

FuncDeclContext.prototype.OPERATOR = function() {
    return this.getToken(WHLSLParser.OPERATOR, 0);
};

FuncDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterFuncDecl(this);
	}
};

FuncDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitFuncDecl(this);
	}
};

FuncDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitFuncDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.FuncDeclContext = FuncDeclContext;

WHLSLParser.prototype.funcDecl = function() {

    var localctx = new FuncDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, WHLSLParser.RULE_funcDecl);
    var _la = 0; // Token type
    try {
        this.state = 261;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__8:
        case WHLSLParser.VERTEX:
        case WHLSLParser.FRAGMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 238;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case WHLSLParser.VERTEX:
                this.state = 231;
                this.match(WHLSLParser.VERTEX);
                break;
            case WHLSLParser.FRAGMENT:
                this.state = 232;
                this.match(WHLSLParser.FRAGMENT);
                break;
            case WHLSLParser.T__8:
                this.state = 233;
                this.match(WHLSLParser.T__8);
                this.state = 234;
                this.numthreadsSemantic();
                this.state = 235;
                this.match(WHLSLParser.T__9);
                this.state = 236;
                this.match(WHLSLParser.COMPUTE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 240;
            this.type();
            this.state = 241;
            this.match(WHLSLParser.Identifier);
            this.state = 242;
            this.parameters();
            this.state = 245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WHLSLParser.T__7) {
                this.state = 243;
                this.match(WHLSLParser.T__7);
                this.state = 244;
                this.semantic();
            }

            break;
        case WHLSLParser.CONSTANT:
        case WHLSLParser.DEVICE:
        case WHLSLParser.THREADGROUP:
        case WHLSLParser.THREAD:
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 247;
            this.type();
            this.state = 248;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.Identifier || _la===WHLSLParser.OperatorName)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 249;
            this.parameters();
            this.state = 252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WHLSLParser.T__7) {
                this.state = 250;
                this.match(WHLSLParser.T__7);
                this.state = 251;
                this.semantic();
            }

            break;
        case WHLSLParser.OPERATOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 254;
            this.match(WHLSLParser.OPERATOR);
            this.state = 255;
            this.type();
            this.state = 256;
            this.parameters();
            this.state = 259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WHLSLParser.T__7) {
                this.state = 257;
                this.match(WHLSLParser.T__7);
                this.state = 258;
                this.semantic();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitParameters(this);
	}
};

ParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ParametersContext = ParametersContext;

WHLSLParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, WHLSLParser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 263;
            this.match(WHLSLParser.T__1);
            this.state = 264;
            this.match(WHLSLParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 265;
            this.match(WHLSLParser.T__1);
            this.state = 266;
            this.parameter();
            this.state = 271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WHLSLParser.T__3) {
                this.state = 267;
                this.match(WHLSLParser.T__3);
                this.state = 268;
                this.parameter();
                this.state = 273;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 274;
            this.match(WHLSLParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParameterContext.prototype.Qualifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.Qualifier);
    } else {
        return this.getToken(WHLSLParser.Qualifier, i);
    }
};


ParameterContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

ParameterContext.prototype.semantic = function() {
    return this.getTypedRuleContext(SemanticContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ParameterContext = ParameterContext;

WHLSLParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, WHLSLParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.Qualifier) {
            this.state = 278;
            this.match(WHLSLParser.Qualifier);
            this.state = 283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 284;
        this.type();
        this.state = 286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.Identifier) {
            this.state = 285;
            this.match(WHLSLParser.Identifier);
        }

        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__7) {
            this.state = 288;
            this.match(WHLSLParser.T__7);
            this.state = 289;
            this.semantic();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.addressSpace = function() {
    return this.getTypedRuleContext(AddressSpaceContext,0);
};

TypeContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

TypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeContext.prototype.typeSuffixAbbreviated = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSuffixAbbreviatedContext);
    } else {
        return this.getTypedRuleContext(TypeSuffixAbbreviatedContext,i);
    }
};

TypeContext.prototype.typeSuffixNonAbbreviated = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSuffixNonAbbreviatedContext);
    } else {
        return this.getTypedRuleContext(TypeSuffixNonAbbreviatedContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeContext = TypeContext;

WHLSLParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, WHLSLParser.RULE_type);
    var _la = 0; // Token type
    try {
        this.state = 308;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.CONSTANT:
        case WHLSLParser.DEVICE:
        case WHLSLParser.THREADGROUP:
        case WHLSLParser.THREAD:
            this.enterOuterAlt(localctx, 1);
            this.state = 292;
            this.addressSpace();
            this.state = 293;
            this.match(WHLSLParser.Identifier);
            this.state = 294;
            this.typeArguments();
            this.state = 296; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 295;
                this.typeSuffixAbbreviated();
                this.state = 298; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__8) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__11))) !== 0));
            break;
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 300;
            this.match(WHLSLParser.Identifier);
            this.state = 301;
            this.typeArguments();
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__8) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__11))) !== 0)) {
                this.state = 302;
                this.typeSuffixNonAbbreviated();
                this.state = 307;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AddressSpaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_addressSpace;
    return this;
}

AddressSpaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddressSpaceContext.prototype.constructor = AddressSpaceContext;

AddressSpaceContext.prototype.CONSTANT = function() {
    return this.getToken(WHLSLParser.CONSTANT, 0);
};

AddressSpaceContext.prototype.DEVICE = function() {
    return this.getToken(WHLSLParser.DEVICE, 0);
};

AddressSpaceContext.prototype.THREADGROUP = function() {
    return this.getToken(WHLSLParser.THREADGROUP, 0);
};

AddressSpaceContext.prototype.THREAD = function() {
    return this.getToken(WHLSLParser.THREAD, 0);
};

AddressSpaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterAddressSpace(this);
	}
};

AddressSpaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitAddressSpace(this);
	}
};

AddressSpaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitAddressSpace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.AddressSpaceContext = AddressSpaceContext;

WHLSLParser.prototype.addressSpace = function() {

    var localctx = new AddressSpaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, WHLSLParser.RULE_addressSpace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        _la = this._input.LA(1);
        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (WHLSLParser.CONSTANT - 73)) | (1 << (WHLSLParser.DEVICE - 73)) | (1 << (WHLSLParser.THREADGROUP - 73)) | (1 << (WHLSLParser.THREAD - 73)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSuffixAbbreviatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_typeSuffixAbbreviated;
    return this;
}

TypeSuffixAbbreviatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSuffixAbbreviatedContext.prototype.constructor = TypeSuffixAbbreviatedContext;

TypeSuffixAbbreviatedContext.prototype.IntLiteral = function() {
    return this.getToken(WHLSLParser.IntLiteral, 0);
};

TypeSuffixAbbreviatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTypeSuffixAbbreviated(this);
	}
};

TypeSuffixAbbreviatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTypeSuffixAbbreviated(this);
	}
};

TypeSuffixAbbreviatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTypeSuffixAbbreviated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeSuffixAbbreviatedContext = TypeSuffixAbbreviatedContext;

WHLSLParser.prototype.typeSuffixAbbreviated = function() {

    var localctx = new TypeSuffixAbbreviatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, WHLSLParser.RULE_typeSuffixAbbreviated);
    try {
        this.state = 317;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 312;
            this.match(WHLSLParser.T__10);
            break;
        case WHLSLParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 313;
            this.match(WHLSLParser.T__11);
            break;
        case WHLSLParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 314;
            this.match(WHLSLParser.T__8);
            this.state = 315;
            this.match(WHLSLParser.IntLiteral);
            this.state = 316;
            this.match(WHLSLParser.T__9);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSuffixNonAbbreviatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_typeSuffixNonAbbreviated;
    return this;
}

TypeSuffixNonAbbreviatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSuffixNonAbbreviatedContext.prototype.constructor = TypeSuffixNonAbbreviatedContext;

TypeSuffixNonAbbreviatedContext.prototype.addressSpace = function() {
    return this.getTypedRuleContext(AddressSpaceContext,0);
};

TypeSuffixNonAbbreviatedContext.prototype.IntLiteral = function() {
    return this.getToken(WHLSLParser.IntLiteral, 0);
};

TypeSuffixNonAbbreviatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTypeSuffixNonAbbreviated(this);
	}
};

TypeSuffixNonAbbreviatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTypeSuffixNonAbbreviated(this);
	}
};

TypeSuffixNonAbbreviatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTypeSuffixNonAbbreviated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeSuffixNonAbbreviatedContext = TypeSuffixNonAbbreviatedContext;

WHLSLParser.prototype.typeSuffixNonAbbreviated = function() {

    var localctx = new TypeSuffixNonAbbreviatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, WHLSLParser.RULE_typeSuffixNonAbbreviated);
    try {
        this.state = 326;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 319;
            this.match(WHLSLParser.T__10);
            this.state = 320;
            this.addressSpace();
            break;
        case WHLSLParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 321;
            this.match(WHLSLParser.T__11);
            this.state = 322;
            this.addressSpace();
            break;
        case WHLSLParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 323;
            this.match(WHLSLParser.T__8);
            this.state = 324;
            this.match(WHLSLParser.IntLiteral);
            this.state = 325;
            this.match(WHLSLParser.T__9);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeArgumentsContext = TypeArgumentsContext;

WHLSLParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, WHLSLParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.state = 343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 328;
            this.match(WHLSLParser.T__12);
            this.state = 329;
            this.typeArgument();
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WHLSLParser.T__3) {
                this.state = 330;
                this.match(WHLSLParser.T__3);
                this.state = 331;
                this.typeArgument();
                this.state = 336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 337;
            this.match(WHLSLParser.T__13);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WHLSLParser.T__12) {
                this.state = 339;
                this.match(WHLSLParser.T__12);
                this.state = 340;
                this.match(WHLSLParser.T__13);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.constexpression = function() {
    return this.getTypedRuleContext(ConstexpressionContext,0);
};

TypeArgumentContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TypeArgumentContext = TypeArgumentContext;

WHLSLParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, WHLSLParser.RULE_typeArgument);
    try {
        this.state = 347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 345;
            this.constexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 346;
            this.match(WHLSLParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockBody = function() {
    return this.getTypedRuleContext(BlockBodyContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.BlockContext = BlockContext;

WHLSLParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, WHLSLParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(WHLSLParser.T__5);
        this.state = 350;
        this.blockBody();
        this.state = 351;
        this.match(WHLSLParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_blockBody;
    return this;
}

BlockBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockBodyContext.prototype.constructor = BlockBodyContext;

BlockBodyContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

BlockBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterBlockBody(this);
	}
};

BlockBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitBlockBody(this);
	}
};

BlockBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitBlockBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.BlockBodyContext = BlockBodyContext;

WHLSLParser.prototype.blockBody = function() {

    var localctx = new BlockBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, WHLSLParser.RULE_blockBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__0) | (1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__5) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)) | (1 << (WHLSLParser.IF - 33)) | (1 << (WHLSLParser.CONTINUE - 33)) | (1 << (WHLSLParser.BREAK - 33)) | (1 << (WHLSLParser.SWITCH - 33)) | (1 << (WHLSLParser.FALLTHROUGHKEYWORD - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (WHLSLParser.FOR - 65)) | (1 << (WHLSLParser.WHILE - 65)) | (1 << (WHLSLParser.DO - 65)) | (1 << (WHLSLParser.RETURN - 65)) | (1 << (WHLSLParser.TRAP - 65)) | (1 << (WHLSLParser.NULLKEYWORD - 65)) | (1 << (WHLSLParser.TRUEKEYWORD - 65)) | (1 << (WHLSLParser.FALSEKEYWORD - 65)) | (1 << (WHLSLParser.CONSTANT - 65)) | (1 << (WHLSLParser.DEVICE - 65)) | (1 << (WHLSLParser.THREADGROUP - 65)) | (1 << (WHLSLParser.THREAD - 65)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 353;
            this.stmt();
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StmtContext.prototype.ifStmt = function() {
    return this.getTypedRuleContext(IfStmtContext,0);
};

StmtContext.prototype.switchStmt = function() {
    return this.getTypedRuleContext(SwitchStmtContext,0);
};

StmtContext.prototype.forStmt = function() {
    return this.getTypedRuleContext(ForStmtContext,0);
};

StmtContext.prototype.whileStmt = function() {
    return this.getTypedRuleContext(WhileStmtContext,0);
};

StmtContext.prototype.doStmt = function() {
    return this.getTypedRuleContext(DoStmtContext,0);
};

StmtContext.prototype.BREAK = function() {
    return this.getToken(WHLSLParser.BREAK, 0);
};

StmtContext.prototype.CONTINUE = function() {
    return this.getToken(WHLSLParser.CONTINUE, 0);
};

StmtContext.prototype.FALLTHROUGHKEYWORD = function() {
    return this.getToken(WHLSLParser.FALLTHROUGHKEYWORD, 0);
};

StmtContext.prototype.TRAP = function() {
    return this.getToken(WHLSLParser.TRAP, 0);
};

StmtContext.prototype.RETURN = function() {
    return this.getToken(WHLSLParser.RETURN, 0);
};

StmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

StmtContext.prototype.variableDecls = function() {
    return this.getTypedRuleContext(VariableDeclsContext,0);
};

StmtContext.prototype.effectfulExpr = function() {
    return this.getTypedRuleContext(EffectfulExprContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.StmtContext = StmtContext;

WHLSLParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, WHLSLParser.RULE_stmt);
    var _la = 0; // Token type
    try {
        this.state = 386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 359;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 360;
            this.ifStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 361;
            this.switchStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 362;
            this.forStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 363;
            this.whileStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 364;
            this.doStmt();
            this.state = 365;
            this.match(WHLSLParser.T__0);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 367;
            this.match(WHLSLParser.BREAK);
            this.state = 368;
            this.match(WHLSLParser.T__0);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 369;
            this.match(WHLSLParser.CONTINUE);
            this.state = 370;
            this.match(WHLSLParser.T__0);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 371;
            this.match(WHLSLParser.FALLTHROUGHKEYWORD);
            this.state = 372;
            this.match(WHLSLParser.T__0);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 373;
            this.match(WHLSLParser.TRAP);
            this.state = 374;
            this.match(WHLSLParser.T__0);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 375;
            this.match(WHLSLParser.RETURN);
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (WHLSLParser.NULLKEYWORD - 70)) | (1 << (WHLSLParser.TRUEKEYWORD - 70)) | (1 << (WHLSLParser.FALSEKEYWORD - 70)))) !== 0) || _la===WHLSLParser.Identifier) {
                this.state = 376;
                this.expr();
            }

            this.state = 379;
            this.match(WHLSLParser.T__0);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 380;
            this.variableDecls();
            this.state = 381;
            this.match(WHLSLParser.T__0);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 383;
            this.effectfulExpr();
            this.state = 384;
            this.match(WHLSLParser.T__0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_ifStmt;
    return this;
}

IfStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStmtContext.prototype.constructor = IfStmtContext;

IfStmtContext.prototype.IF = function() {
    return this.getToken(WHLSLParser.IF, 0);
};

IfStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfStmtContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

IfStmtContext.prototype.ELSE = function() {
    return this.getToken(WHLSLParser.ELSE, 0);
};

IfStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterIfStmt(this);
	}
};

IfStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitIfStmt(this);
	}
};

IfStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitIfStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.IfStmtContext = IfStmtContext;

WHLSLParser.prototype.ifStmt = function() {

    var localctx = new IfStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, WHLSLParser.RULE_ifStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.match(WHLSLParser.IF);
        this.state = 389;
        this.match(WHLSLParser.T__1);
        this.state = 390;
        this.expr();
        this.state = 391;
        this.match(WHLSLParser.T__2);
        this.state = 392;
        this.stmt();
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 393;
            this.match(WHLSLParser.ELSE);
            this.state = 394;
            this.stmt();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_switchStmt;
    return this;
}

SwitchStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStmtContext.prototype.constructor = SwitchStmtContext;

SwitchStmtContext.prototype.SWITCH = function() {
    return this.getToken(WHLSLParser.SWITCH, 0);
};

SwitchStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

SwitchStmtContext.prototype.switchCase = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchCaseContext);
    } else {
        return this.getTypedRuleContext(SwitchCaseContext,i);
    }
};

SwitchStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterSwitchStmt(this);
	}
};

SwitchStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitSwitchStmt(this);
	}
};

SwitchStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitSwitchStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.SwitchStmtContext = SwitchStmtContext;

WHLSLParser.prototype.switchStmt = function() {

    var localctx = new SwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, WHLSLParser.RULE_switchStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.match(WHLSLParser.SWITCH);
        this.state = 398;
        this.match(WHLSLParser.T__1);
        this.state = 399;
        this.expr();
        this.state = 400;
        this.match(WHLSLParser.T__2);
        this.state = 401;
        this.match(WHLSLParser.T__5);
        this.state = 405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.CASE || _la===WHLSLParser.DEFAULT) {
            this.state = 402;
            this.switchCase();
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 408;
        this.match(WHLSLParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_switchCase;
    return this;
}

SwitchCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchCaseContext.prototype.constructor = SwitchCaseContext;

SwitchCaseContext.prototype.blockBody = function() {
    return this.getTypedRuleContext(BlockBodyContext,0);
};

SwitchCaseContext.prototype.CASE = function() {
    return this.getToken(WHLSLParser.CASE, 0);
};

SwitchCaseContext.prototype.constexpression = function() {
    return this.getTypedRuleContext(ConstexpressionContext,0);
};

SwitchCaseContext.prototype.DEFAULT = function() {
    return this.getToken(WHLSLParser.DEFAULT, 0);
};

SwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterSwitchCase(this);
	}
};

SwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitSwitchCase(this);
	}
};

SwitchCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitSwitchCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.SwitchCaseContext = SwitchCaseContext;

WHLSLParser.prototype.switchCase = function() {

    var localctx = new SwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, WHLSLParser.RULE_switchCase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.CASE:
            this.state = 410;
            this.match(WHLSLParser.CASE);
            this.state = 411;
            this.constexpression();
            break;
        case WHLSLParser.DEFAULT:
            this.state = 412;
            this.match(WHLSLParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 415;
        this.match(WHLSLParser.T__7);
        this.state = 416;
        this.blockBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_forStmt;
    return this;
}

ForStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStmtContext.prototype.constructor = ForStmtContext;

ForStmtContext.prototype.FOR = function() {
    return this.getToken(WHLSLParser.FOR, 0);
};

ForStmtContext.prototype.stmt = function() {
    return this.getTypedRuleContext(StmtContext,0);
};

ForStmtContext.prototype.variableDecls = function() {
    return this.getTypedRuleContext(VariableDeclsContext,0);
};

ForStmtContext.prototype.effectfulExpr = function() {
    return this.getTypedRuleContext(EffectfulExprContext,0);
};

ForStmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ForStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterForStmt(this);
	}
};

ForStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitForStmt(this);
	}
};

ForStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitForStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ForStmtContext = ForStmtContext;

WHLSLParser.prototype.forStmt = function() {

    var localctx = new ForStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, WHLSLParser.RULE_forStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this.match(WHLSLParser.FOR);
        this.state = 419;
        this.match(WHLSLParser.T__1);
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.state = 420;
            this.variableDecls();
            break;

        case 2:
            this.state = 421;
            this.effectfulExpr();
            break;

        }
        this.state = 424;
        this.match(WHLSLParser.T__0);
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (WHLSLParser.NULLKEYWORD - 70)) | (1 << (WHLSLParser.TRUEKEYWORD - 70)) | (1 << (WHLSLParser.FALSEKEYWORD - 70)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 425;
            this.expr();
        }

        this.state = 428;
        this.match(WHLSLParser.T__0);
        this.state = 430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (WHLSLParser.NULLKEYWORD - 70)) | (1 << (WHLSLParser.TRUEKEYWORD - 70)) | (1 << (WHLSLParser.FALSEKEYWORD - 70)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 429;
            this.expr();
        }

        this.state = 432;
        this.match(WHLSLParser.T__2);
        this.state = 433;
        this.stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_whileStmt;
    return this;
}

WhileStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStmtContext.prototype.constructor = WhileStmtContext;

WhileStmtContext.prototype.WHILE = function() {
    return this.getToken(WHLSLParser.WHILE, 0);
};

WhileStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WhileStmtContext.prototype.stmt = function() {
    return this.getTypedRuleContext(StmtContext,0);
};

WhileStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterWhileStmt(this);
	}
};

WhileStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitWhileStmt(this);
	}
};

WhileStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitWhileStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.WhileStmtContext = WhileStmtContext;

WHLSLParser.prototype.whileStmt = function() {

    var localctx = new WhileStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, WHLSLParser.RULE_whileStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 435;
        this.match(WHLSLParser.WHILE);
        this.state = 436;
        this.match(WHLSLParser.T__1);
        this.state = 437;
        this.expr();
        this.state = 438;
        this.match(WHLSLParser.T__2);
        this.state = 439;
        this.stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_doStmt;
    return this;
}

DoStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStmtContext.prototype.constructor = DoStmtContext;

DoStmtContext.prototype.DO = function() {
    return this.getToken(WHLSLParser.DO, 0);
};

DoStmtContext.prototype.stmt = function() {
    return this.getTypedRuleContext(StmtContext,0);
};

DoStmtContext.prototype.WHILE = function() {
    return this.getToken(WHLSLParser.WHILE, 0);
};

DoStmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

DoStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterDoStmt(this);
	}
};

DoStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitDoStmt(this);
	}
};

DoStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitDoStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.DoStmtContext = DoStmtContext;

WHLSLParser.prototype.doStmt = function() {

    var localctx = new DoStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, WHLSLParser.RULE_doStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.match(WHLSLParser.DO);
        this.state = 442;
        this.stmt();
        this.state = 443;
        this.match(WHLSLParser.WHILE);
        this.state = 444;
        this.match(WHLSLParser.T__1);
        this.state = 445;
        this.expr();
        this.state = 446;
        this.match(WHLSLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_variableDecls;
    return this;
}

VariableDeclsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclsContext.prototype.constructor = VariableDeclsContext;

VariableDeclsContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

VariableDeclsContext.prototype.variableDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclContext);
    } else {
        return this.getTypedRuleContext(VariableDeclContext,i);
    }
};

VariableDeclsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterVariableDecls(this);
	}
};

VariableDeclsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitVariableDecls(this);
	}
};

VariableDeclsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitVariableDecls(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.VariableDeclsContext = VariableDeclsContext;

WHLSLParser.prototype.variableDecls = function() {

    var localctx = new VariableDeclsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, WHLSLParser.RULE_variableDecls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.type();
        this.state = 449;
        this.variableDecl();
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__3) {
            this.state = 450;
            this.match(WHLSLParser.T__3);
            this.state = 451;
            this.variableDecl();
            this.state = 456;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_variableDecl;
    return this;
}

VariableDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclContext.prototype.constructor = VariableDeclContext;

VariableDeclContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

VariableDeclContext.prototype.Qualifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.Qualifier);
    } else {
        return this.getToken(WHLSLParser.Qualifier, i);
    }
};


VariableDeclContext.prototype.semantic = function() {
    return this.getTypedRuleContext(SemanticContext,0);
};

VariableDeclContext.prototype.possibleTernaryConditional = function() {
    return this.getTypedRuleContext(PossibleTernaryConditionalContext,0);
};

VariableDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterVariableDecl(this);
	}
};

VariableDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitVariableDecl(this);
	}
};

VariableDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitVariableDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.VariableDeclContext = VariableDeclContext;

WHLSLParser.prototype.variableDecl = function() {

    var localctx = new VariableDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, WHLSLParser.RULE_variableDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.Qualifier) {
            this.state = 457;
            this.match(WHLSLParser.Qualifier);
            this.state = 462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 463;
        this.match(WHLSLParser.Identifier);
        this.state = 466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__7) {
            this.state = 464;
            this.match(WHLSLParser.T__7);
            this.state = 465;
            this.semantic();
        }

        this.state = 470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WHLSLParser.T__4) {
            this.state = 468;
            this.match(WHLSLParser.T__4);
            this.state = 469;
            this.possibleTernaryConditional();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_constexpression;
    return this;
}

ConstexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstexpressionContext.prototype.constructor = ConstexpressionContext;

ConstexpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ConstexpressionContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WHLSLParser.Identifier);
    } else {
        return this.getToken(WHLSLParser.Identifier, i);
    }
};


ConstexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterConstexpression(this);
	}
};

ConstexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitConstexpression(this);
	}
};

ConstexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitConstexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ConstexpressionContext = ConstexpressionContext;

WHLSLParser.prototype.constexpression = function() {

    var localctx = new ConstexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, WHLSLParser.RULE_constexpression);
    try {
        this.state = 476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.IntLiteral:
        case WHLSLParser.FloatLiteral:
        case WHLSLParser.NULLKEYWORD:
        case WHLSLParser.TRUEKEYWORD:
        case WHLSLParser.FALSEKEYWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 472;
            this.literal();
            break;
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 473;
            this.match(WHLSLParser.Identifier);
            this.state = 474;
            this.match(WHLSLParser.T__14);
            this.state = 475;
            this.match(WHLSLParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EffectfulExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_effectfulExpr;
    return this;
}

EffectfulExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EffectfulExprContext.prototype.constructor = EffectfulExprContext;

EffectfulExprContext.prototype.effAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EffAssignmentContext);
    } else {
        return this.getTypedRuleContext(EffAssignmentContext,i);
    }
};

EffectfulExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEffectfulExpr(this);
	}
};

EffectfulExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEffectfulExpr(this);
	}
};

EffectfulExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEffectfulExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EffectfulExprContext = EffectfulExprContext;

WHLSLParser.prototype.effectfulExpr = function() {

    var localctx = new EffectfulExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, WHLSLParser.RULE_effectfulExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (WHLSLParser.NULLKEYWORD - 70)) | (1 << (WHLSLParser.TRUEKEYWORD - 70)) | (1 << (WHLSLParser.FALSEKEYWORD - 70)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 483;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 478;
                    this.effAssignment();
                    this.state = 479;
                    this.match(WHLSLParser.T__3); 
                }
                this.state = 485;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
            }

            this.state = 486;
            this.effAssignment();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EffAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_effAssignment;
    return this;
}

EffAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EffAssignmentContext.prototype.constructor = EffAssignmentContext;

EffAssignmentContext.prototype.possiblePrefix = function() {
    return this.getTypedRuleContext(PossiblePrefixContext,0);
};

EffAssignmentContext.prototype.assignOperator = function() {
    return this.getTypedRuleContext(AssignOperatorContext,0);
};

EffAssignmentContext.prototype.possibleTernaryConditional = function() {
    return this.getTypedRuleContext(PossibleTernaryConditionalContext,0);
};

EffAssignmentContext.prototype.effPrefix = function() {
    return this.getTypedRuleContext(EffPrefixContext,0);
};

EffAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEffAssignment(this);
	}
};

EffAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEffAssignment(this);
	}
};

EffAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEffAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EffAssignmentContext = EffAssignmentContext;

WHLSLParser.prototype.effAssignment = function() {

    var localctx = new EffAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, WHLSLParser.RULE_effAssignment);
    try {
        this.state = 494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.possiblePrefix();
            this.state = 490;
            this.assignOperator();
            this.state = 491;
            this.possibleTernaryConditional();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 493;
            this.effPrefix();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_assignOperator;
    return this;
}

AssignOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignOperatorContext.prototype.constructor = AssignOperatorContext;


AssignOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterAssignOperator(this);
	}
};

AssignOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitAssignOperator(this);
	}
};

AssignOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitAssignOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.AssignOperatorContext = AssignOperatorContext;

WHLSLParser.prototype.assignOperator = function() {

    var localctx = new AssignOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, WHLSLParser.RULE_assignOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__4) | (1 << WHLSLParser.T__15) | (1 << WHLSLParser.T__16) | (1 << WHLSLParser.T__17) | (1 << WHLSLParser.T__18) | (1 << WHLSLParser.T__19) | (1 << WHLSLParser.T__20) | (1 << WHLSLParser.T__21) | (1 << WHLSLParser.T__22) | (1 << WHLSLParser.T__23) | (1 << WHLSLParser.T__24))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EffPrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_effPrefix;
    return this;
}

EffPrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EffPrefixContext.prototype.constructor = EffPrefixContext;

EffPrefixContext.prototype.possiblePrefix = function() {
    return this.getTypedRuleContext(PossiblePrefixContext,0);
};

EffPrefixContext.prototype.effSuffix = function() {
    return this.getTypedRuleContext(EffSuffixContext,0);
};

EffPrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEffPrefix(this);
	}
};

EffPrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEffPrefix(this);
	}
};

EffPrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEffPrefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EffPrefixContext = EffPrefixContext;

WHLSLParser.prototype.effPrefix = function() {

    var localctx = new EffPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, WHLSLParser.RULE_effPrefix);
    var _la = 0; // Token type
    try {
        this.state = 501;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__25:
        case WHLSLParser.T__26:
            this.enterOuterAlt(localctx, 1);
            this.state = 498;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.T__25 || _la===WHLSLParser.T__26)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 499;
            this.possiblePrefix();
            break;
        case WHLSLParser.T__1:
        case WHLSLParser.IntLiteral:
        case WHLSLParser.FloatLiteral:
        case WHLSLParser.NULLKEYWORD:
        case WHLSLParser.TRUEKEYWORD:
        case WHLSLParser.FALSEKEYWORD:
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 500;
            this.effSuffix();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EffSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_effSuffix;
    return this;
}

EffSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EffSuffixContext.prototype.constructor = EffSuffixContext;

EffSuffixContext.prototype.possibleSuffix = function() {
    return this.getTypedRuleContext(PossibleSuffixContext,0);
};

EffSuffixContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

EffSuffixContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

EffSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterEffSuffix(this);
	}
};

EffSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitEffSuffix(this);
	}
};

EffSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitEffSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.EffSuffixContext = EffSuffixContext;

WHLSLParser.prototype.effSuffix = function() {

    var localctx = new EffSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, WHLSLParser.RULE_effSuffix);
    var _la = 0; // Token type
    try {
        this.state = 511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.possibleSuffix();
            this.state = 504;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.T__25 || _la===WHLSLParser.T__26)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 506;
            this.callExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 507;
            this.match(WHLSLParser.T__1);
            this.state = 508;
            this.expr();
            this.state = 509;
            this.match(WHLSLParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.possibleTernaryConditional = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleTernaryConditionalContext);
    } else {
        return this.getTypedRuleContext(PossibleTernaryConditionalContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.ExprContext = ExprContext;

WHLSLParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, WHLSLParser.RULE_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 513;
                this.possibleTernaryConditional();
                this.state = 514;
                this.match(WHLSLParser.T__3); 
            }
            this.state = 520;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

        this.state = 521;
        this.possibleTernaryConditional();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleTernaryConditionalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleTernaryConditional;
    return this;
}

PossibleTernaryConditionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleTernaryConditionalContext.prototype.constructor = PossibleTernaryConditionalContext;

PossibleTernaryConditionalContext.prototype.possibleLogicalBinop = function() {
    return this.getTypedRuleContext(PossibleLogicalBinopContext,0);
};

PossibleTernaryConditionalContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

PossibleTernaryConditionalContext.prototype.possibleTernaryConditional = function() {
    return this.getTypedRuleContext(PossibleTernaryConditionalContext,0);
};

PossibleTernaryConditionalContext.prototype.possiblePrefix = function() {
    return this.getTypedRuleContext(PossiblePrefixContext,0);
};

PossibleTernaryConditionalContext.prototype.assignOperator = function() {
    return this.getTypedRuleContext(AssignOperatorContext,0);
};

PossibleTernaryConditionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleTernaryConditional(this);
	}
};

PossibleTernaryConditionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleTernaryConditional(this);
	}
};

PossibleTernaryConditionalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleTernaryConditional(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleTernaryConditionalContext = PossibleTernaryConditionalContext;

WHLSLParser.prototype.possibleTernaryConditional = function() {

    var localctx = new PossibleTernaryConditionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, WHLSLParser.RULE_possibleTernaryConditional);
    try {
        this.state = 534;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 523;
            this.possibleLogicalBinop();
            this.state = 524;
            this.match(WHLSLParser.T__27);
            this.state = 525;
            this.expr();
            this.state = 526;
            this.match(WHLSLParser.T__7);
            this.state = 527;
            this.possibleTernaryConditional();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 529;
            this.possiblePrefix();
            this.state = 530;
            this.assignOperator();
            this.state = 531;
            this.possibleTernaryConditional();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 533;
            this.possibleLogicalBinop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleLogicalBinopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleLogicalBinop;
    return this;
}

PossibleLogicalBinopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleLogicalBinopContext.prototype.constructor = PossibleLogicalBinopContext;

PossibleLogicalBinopContext.prototype.possibleRelationalBinop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleRelationalBinopContext);
    } else {
        return this.getTypedRuleContext(PossibleRelationalBinopContext,i);
    }
};

PossibleLogicalBinopContext.prototype.logicalBinop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalBinopContext);
    } else {
        return this.getTypedRuleContext(LogicalBinopContext,i);
    }
};

PossibleLogicalBinopContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleLogicalBinop(this);
	}
};

PossibleLogicalBinopContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleLogicalBinop(this);
	}
};

PossibleLogicalBinopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleLogicalBinop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleLogicalBinopContext = PossibleLogicalBinopContext;

WHLSLParser.prototype.possibleLogicalBinop = function() {

    var localctx = new PossibleLogicalBinopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, WHLSLParser.RULE_possibleLogicalBinop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.possibleRelationalBinop();
        this.state = 542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (WHLSLParser.T__28 - 29)) | (1 << (WHLSLParser.T__29 - 29)) | (1 << (WHLSLParser.T__30 - 29)) | (1 << (WHLSLParser.T__31 - 29)) | (1 << (WHLSLParser.T__32 - 29)))) !== 0)) {
            this.state = 537;
            this.logicalBinop();
            this.state = 538;
            this.possibleRelationalBinop();
            this.state = 544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogicalBinopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_logicalBinop;
    return this;
}

LogicalBinopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalBinopContext.prototype.constructor = LogicalBinopContext;


LogicalBinopContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterLogicalBinop(this);
	}
};

LogicalBinopContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitLogicalBinop(this);
	}
};

LogicalBinopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitLogicalBinop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.LogicalBinopContext = LogicalBinopContext;

WHLSLParser.prototype.logicalBinop = function() {

    var localctx = new LogicalBinopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, WHLSLParser.RULE_logicalBinop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        _la = this._input.LA(1);
        if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (WHLSLParser.T__28 - 29)) | (1 << (WHLSLParser.T__29 - 29)) | (1 << (WHLSLParser.T__30 - 29)) | (1 << (WHLSLParser.T__31 - 29)) | (1 << (WHLSLParser.T__32 - 29)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleRelationalBinopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleRelationalBinop;
    return this;
}

PossibleRelationalBinopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleRelationalBinopContext.prototype.constructor = PossibleRelationalBinopContext;

PossibleRelationalBinopContext.prototype.possibleShift = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleShiftContext);
    } else {
        return this.getTypedRuleContext(PossibleShiftContext,i);
    }
};

PossibleRelationalBinopContext.prototype.relationalBinop = function() {
    return this.getTypedRuleContext(RelationalBinopContext,0);
};

PossibleRelationalBinopContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleRelationalBinop(this);
	}
};

PossibleRelationalBinopContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleRelationalBinop(this);
	}
};

PossibleRelationalBinopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleRelationalBinop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleRelationalBinopContext = PossibleRelationalBinopContext;

WHLSLParser.prototype.possibleRelationalBinop = function() {

    var localctx = new PossibleRelationalBinopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, WHLSLParser.RULE_possibleRelationalBinop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.possibleShift();
        this.state = 551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (WHLSLParser.T__12 - 13)) | (1 << (WHLSLParser.T__13 - 13)) | (1 << (WHLSLParser.T__33 - 13)) | (1 << (WHLSLParser.T__34 - 13)) | (1 << (WHLSLParser.T__35 - 13)) | (1 << (WHLSLParser.T__36 - 13)))) !== 0)) {
            this.state = 548;
            this.relationalBinop();
            this.state = 549;
            this.possibleShift();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationalBinopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_relationalBinop;
    return this;
}

RelationalBinopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalBinopContext.prototype.constructor = RelationalBinopContext;


RelationalBinopContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterRelationalBinop(this);
	}
};

RelationalBinopContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitRelationalBinop(this);
	}
};

RelationalBinopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitRelationalBinop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.RelationalBinopContext = RelationalBinopContext;

WHLSLParser.prototype.relationalBinop = function() {

    var localctx = new RelationalBinopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, WHLSLParser.RULE_relationalBinop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        _la = this._input.LA(1);
        if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (WHLSLParser.T__12 - 13)) | (1 << (WHLSLParser.T__13 - 13)) | (1 << (WHLSLParser.T__33 - 13)) | (1 << (WHLSLParser.T__34 - 13)) | (1 << (WHLSLParser.T__35 - 13)) | (1 << (WHLSLParser.T__36 - 13)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleShiftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleShift;
    return this;
}

PossibleShiftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleShiftContext.prototype.constructor = PossibleShiftContext;

PossibleShiftContext.prototype.possibleAdd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleAddContext);
    } else {
        return this.getTypedRuleContext(PossibleAddContext,i);
    }
};

PossibleShiftContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleShift(this);
	}
};

PossibleShiftContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleShift(this);
	}
};

PossibleShiftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleShift(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleShiftContext = PossibleShiftContext;

WHLSLParser.prototype.possibleShift = function() {

    var localctx = new PossibleShiftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, WHLSLParser.RULE_possibleShift);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.possibleAdd();
        this.state = 560;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__37 || _la===WHLSLParser.T__38) {
            this.state = 556;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.T__37 || _la===WHLSLParser.T__38)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 557;
            this.possibleAdd();
            this.state = 562;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleAddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleAdd;
    return this;
}

PossibleAddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleAddContext.prototype.constructor = PossibleAddContext;

PossibleAddContext.prototype.possibleMult = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleMultContext);
    } else {
        return this.getTypedRuleContext(PossibleMultContext,i);
    }
};

PossibleAddContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleAdd(this);
	}
};

PossibleAddContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleAdd(this);
	}
};

PossibleAddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleAddContext = PossibleAddContext;

WHLSLParser.prototype.possibleAdd = function() {

    var localctx = new PossibleAddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, WHLSLParser.RULE_possibleAdd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.possibleMult();
        this.state = 568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__39 || _la===WHLSLParser.T__40) {
            this.state = 564;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.T__39 || _la===WHLSLParser.T__40)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 565;
            this.possibleMult();
            this.state = 570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleMultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleMult;
    return this;
}

PossibleMultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleMultContext.prototype.constructor = PossibleMultContext;

PossibleMultContext.prototype.possiblePrefix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossiblePrefixContext);
    } else {
        return this.getTypedRuleContext(PossiblePrefixContext,i);
    }
};

PossibleMultContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleMult(this);
	}
};

PossibleMultContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleMult(this);
	}
};

PossibleMultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleMult(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleMultContext = PossibleMultContext;

WHLSLParser.prototype.possibleMult = function() {

    var localctx = new PossibleMultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, WHLSLParser.RULE_possibleMult);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.possiblePrefix();
        this.state = 576;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WHLSLParser.T__10 || _la===WHLSLParser.T__41 || _la===WHLSLParser.T__42) {
            this.state = 572;
            _la = this._input.LA(1);
            if(!(_la===WHLSLParser.T__10 || _la===WHLSLParser.T__41 || _la===WHLSLParser.T__42)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 573;
            this.possiblePrefix();
            this.state = 578;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossiblePrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possiblePrefix;
    return this;
}

PossiblePrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossiblePrefixContext.prototype.constructor = PossiblePrefixContext;

PossiblePrefixContext.prototype.possibleSuffix = function() {
    return this.getTypedRuleContext(PossibleSuffixContext,0);
};

PossiblePrefixContext.prototype.prefixOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrefixOpContext);
    } else {
        return this.getTypedRuleContext(PrefixOpContext,i);
    }
};

PossiblePrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossiblePrefix(this);
	}
};

PossiblePrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossiblePrefix(this);
	}
};

PossiblePrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossiblePrefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossiblePrefixContext = PossiblePrefixContext;

WHLSLParser.prototype.possiblePrefix = function() {

    var localctx = new PossiblePrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, WHLSLParser.RULE_possiblePrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)))) !== 0)) {
            this.state = 579;
            this.prefixOp();
            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 585;
        this.possibleSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_prefixOp;
    return this;
}

PrefixOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixOpContext.prototype.constructor = PrefixOpContext;


PrefixOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPrefixOp(this);
	}
};

PrefixOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPrefixOp(this);
	}
};

PrefixOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPrefixOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PrefixOpContext = PrefixOpContext;

WHLSLParser.prototype.prefixOp = function() {

    var localctx = new PrefixOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, WHLSLParser.RULE_prefixOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitedSuffixOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_limitedSuffixOperator;
    return this;
}

LimitedSuffixOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitedSuffixOperatorContext.prototype.constructor = LimitedSuffixOperatorContext;

LimitedSuffixOperatorContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

LimitedSuffixOperatorContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

LimitedSuffixOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterLimitedSuffixOperator(this);
	}
};

LimitedSuffixOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitLimitedSuffixOperator(this);
	}
};

LimitedSuffixOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitLimitedSuffixOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.LimitedSuffixOperatorContext = LimitedSuffixOperatorContext;

WHLSLParser.prototype.limitedSuffixOperator = function() {

    var localctx = new LimitedSuffixOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, WHLSLParser.RULE_limitedSuffixOperator);
    try {
        this.state = 597;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.T__14:
            this.enterOuterAlt(localctx, 1);
            this.state = 589;
            this.match(WHLSLParser.T__14);
            this.state = 590;
            this.match(WHLSLParser.Identifier);
            break;
        case WHLSLParser.T__46:
            this.enterOuterAlt(localctx, 2);
            this.state = 591;
            this.match(WHLSLParser.T__46);
            this.state = 592;
            this.match(WHLSLParser.Identifier);
            break;
        case WHLSLParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 593;
            this.match(WHLSLParser.T__8);
            this.state = 594;
            this.expr();
            this.state = 595;
            this.match(WHLSLParser.T__9);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PossibleSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_possibleSuffix;
    return this;
}

PossibleSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossibleSuffixContext.prototype.constructor = PossibleSuffixContext;

PossibleSuffixContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

PossibleSuffixContext.prototype.limitedSuffixOperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LimitedSuffixOperatorContext);
    } else {
        return this.getTypedRuleContext(LimitedSuffixOperatorContext,i);
    }
};

PossibleSuffixContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

PossibleSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterPossibleSuffix(this);
	}
};

PossibleSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitPossibleSuffix(this);
	}
};

PossibleSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitPossibleSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.PossibleSuffixContext = PossibleSuffixContext;

WHLSLParser.prototype.possibleSuffix = function() {

    var localctx = new PossibleSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, WHLSLParser.RULE_possibleSuffix);
    var _la = 0; // Token type
    try {
        this.state = 615;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 599;
            this.callExpression();
            this.state = 603;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WHLSLParser.T__8 || _la===WHLSLParser.T__14 || _la===WHLSLParser.T__46) {
                this.state = 600;
                this.limitedSuffixOperator();
                this.state = 605;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 606;
            this.term();
            this.state = 612;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 610;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case WHLSLParser.T__8:
                    case WHLSLParser.T__14:
                    case WHLSLParser.T__46:
                        this.state = 607;
                        this.limitedSuffixOperator();
                        break;
                    case WHLSLParser.T__25:
                        this.state = 608;
                        this.match(WHLSLParser.T__25);
                        break;
                    case WHLSLParser.T__26:
                        this.state = 609;
                        this.match(WHLSLParser.T__26);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 614;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_callExpression;
    return this;
}

CallExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallExpressionContext.prototype.constructor = CallExpressionContext;

CallExpressionContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

CallExpressionContext.prototype.possibleTernaryConditional = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PossibleTernaryConditionalContext);
    } else {
        return this.getTypedRuleContext(PossibleTernaryConditionalContext,i);
    }
};

CallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterCallExpression(this);
	}
};

CallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitCallExpression(this);
	}
};

CallExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitCallExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.CallExpressionContext = CallExpressionContext;

WHLSLParser.prototype.callExpression = function() {

    var localctx = new CallExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, WHLSLParser.RULE_callExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.match(WHLSLParser.Identifier);
        this.state = 618;
        this.match(WHLSLParser.T__1);
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WHLSLParser.T__1) | (1 << WHLSLParser.T__10) | (1 << WHLSLParser.T__25) | (1 << WHLSLParser.T__26))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (WHLSLParser.T__32 - 33)) | (1 << (WHLSLParser.T__39 - 33)) | (1 << (WHLSLParser.T__40 - 33)) | (1 << (WHLSLParser.T__43 - 33)) | (1 << (WHLSLParser.T__44 - 33)) | (1 << (WHLSLParser.T__45 - 33)) | (1 << (WHLSLParser.IntLiteral - 33)) | (1 << (WHLSLParser.FloatLiteral - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (WHLSLParser.NULLKEYWORD - 70)) | (1 << (WHLSLParser.TRUEKEYWORD - 70)) | (1 << (WHLSLParser.FALSEKEYWORD - 70)))) !== 0) || _la===WHLSLParser.Identifier) {
            this.state = 619;
            this.possibleTernaryConditional();
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WHLSLParser.T__3) {
                this.state = 620;
                this.match(WHLSLParser.T__3);
                this.state = 621;
                this.possibleTernaryConditional();
                this.state = 626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 629;
        this.match(WHLSLParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

TermContext.prototype.Identifier = function() {
    return this.getToken(WHLSLParser.Identifier, 0);
};

TermContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.TermContext = TermContext;

WHLSLParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, WHLSLParser.RULE_term);
    try {
        this.state = 637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WHLSLParser.IntLiteral:
        case WHLSLParser.FloatLiteral:
        case WHLSLParser.NULLKEYWORD:
        case WHLSLParser.TRUEKEYWORD:
        case WHLSLParser.FALSEKEYWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 631;
            this.literal();
            break;
        case WHLSLParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 632;
            this.match(WHLSLParser.Identifier);
            break;
        case WHLSLParser.T__1:
            this.enterOuterAlt(localctx, 3);
            this.state = 633;
            this.match(WHLSLParser.T__1);
            this.state = 634;
            this.expr();
            this.state = 635;
            this.match(WHLSLParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WHLSLParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntLiteral = function() {
    return this.getToken(WHLSLParser.IntLiteral, 0);
};

LiteralContext.prototype.FloatLiteral = function() {
    return this.getToken(WHLSLParser.FloatLiteral, 0);
};

LiteralContext.prototype.NULLKEYWORD = function() {
    return this.getToken(WHLSLParser.NULLKEYWORD, 0);
};

LiteralContext.prototype.TRUEKEYWORD = function() {
    return this.getToken(WHLSLParser.TRUEKEYWORD, 0);
};

LiteralContext.prototype.FALSEKEYWORD = function() {
    return this.getToken(WHLSLParser.FALSEKEYWORD, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof WHLSLListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WHLSLVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WHLSLParser.LiteralContext = LiteralContext;

WHLSLParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, WHLSLParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        _la = this._input.LA(1);
        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (WHLSLParser.IntLiteral - 51)) | (1 << (WHLSLParser.FloatLiteral - 51)) | (1 << (WHLSLParser.NULLKEYWORD - 51)) | (1 << (WHLSLParser.TRUEKEYWORD - 51)) | (1 << (WHLSLParser.FALSEKEYWORD - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.WHLSLParser = WHLSLParser;
