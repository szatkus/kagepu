{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/examples/computeBoids.ts","webpack:///./src/glslang.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","title","description","init","canvas","adapter","navigator","gpu","requestAdapter","device","requestDevice","glslang","swapChain","getContext","configureSwapChain","format","computeBindGroupLayout","createBindGroupLayout","bindings","binding","visibility","GPUShaderStage","COMPUTE","type","computePipelineLayout","createPipelineLayout","bindGroupLayouts","renderPipeline","createRenderPipeline","layout","vertexStage","createShaderModule","code","compileGLSL","entryPoint","fragmentStage","primitiveTopology","depthStencilState","depthWriteEnabled","depthCompare","vertexInput","vertexBuffers","stride","stepMode","attributeSet","shaderLocation","offset","colorStates","computePipeline","createComputePipeline","computeStage","renderPassDescriptor","colorAttachments","attachment","undefined","loadValue","g","b","a","depthStencilAttachment","createTexture","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","createView","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","vertexBufferData","Float32Array","verticesBuffer","createBuffer","byteLength","GPUBufferUsage","VERTEX","COPY_DST","setSubData","simParamData","simParamBuffer","UNIFORM","initialParticleData","numParticles","Math","random","particleBuffers","Array","particleBindGroups","STORAGE","createBindGroup","resource","buffer","getCurrentTexture","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","beginRenderPass","setVertexBuffer","draw","getQueue","submit","finish","glslangModule","import","default"],"mappings":"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","file":"computeBoids.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","import glslangModule from '../glslang';\r\n\r\nexport const title = 'Compute Boids';\r\nexport const description = 'A GPU compute particle simulation that mimics \\\r\n                            the flocking behavior of birds. A compute shader updates \\\r\n                            two ping-pong buffers which store particle data. The data \\\r\n                            is used to draw instanced particles.';\r\n\r\nexport async function init(canvas: HTMLCanvasElement) {\r\n  const numParticles = 1500;\r\n\r\n  const vertexShaderGLSL = `#version 450\r\n  layout(location = 0) in vec2 a_particlePos;\r\n  layout(location = 1) in vec2 a_particleVel;\r\n  layout(location = 2) in vec2 a_pos;\r\n  void main() {\r\n    float angle = -atan(a_particleVel.x, a_particleVel.y);\r\n    vec2 pos = vec2(a_pos.x * cos(angle) - a_pos.y * sin(angle),\r\n            a_pos.x * sin(angle) + a_pos.y * cos(angle));\r\n    gl_Position = vec4(pos + a_particlePos, 0, 1);\r\n  }`;\r\n\r\n  const fragmentShaderGLSL = `#version 450\r\n  layout(location = 0) out vec4 fragColor;\r\n  void main() {\r\n    fragColor = vec4(1.0);\r\n  }`;\r\n\r\n  const computeShaderGLSL = `#version 450\r\n  struct Particle {\r\n    vec2 pos;\r\n    vec2 vel;\r\n  };\r\n\r\n  layout(std140, set = 0, binding = 0) uniform SimParams {\r\n    float deltaT;\r\n    float rule1Distance;\r\n    float rule2Distance;\r\n    float rule3Distance;\r\n    float rule1Scale;\r\n    float rule2Scale;\r\n    float rule3Scale;\r\n  } params;\r\n\r\n  layout(std140, set = 0, binding = 1) buffer ParticlesA {\r\n    Particle particles[${numParticles}];\r\n  } particlesA;\r\n\r\n  layout(std140, set = 0, binding = 2) buffer ParticlesB {\r\n    Particle particles[${numParticles}];\r\n  } particlesB;\r\n\r\n  void main() {\r\n    // https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\r\n\r\n    uint index = gl_GlobalInvocationID.x;\r\n    if (index >= ${numParticles}) { return; }\r\n\r\n    vec2 vPos = particlesA.particles[index].pos;\r\n    vec2 vVel = particlesA.particles[index].vel;\r\n\r\n    vec2 cMass = vec2(0.0, 0.0);\r\n    vec2 cVel = vec2(0.0, 0.0);\r\n    vec2 colVel = vec2(0.0, 0.0);\r\n    int cMassCount = 0;\r\n    int cVelCount = 0;\r\n\r\n    vec2 pos;\r\n    vec2 vel;\r\n    for (int i = 0; i < ${numParticles}; ++i) {\r\n      if (i == index) { continue; }\r\n      pos = particlesA.particles[i].pos.xy;\r\n      vel = particlesA.particles[i].vel.xy;\r\n\r\n      if (distance(pos, vPos) < params.rule1Distance) {\r\n        cMass += pos;\r\n        cMassCount++;\r\n      }\r\n      if (distance(pos, vPos) < params.rule2Distance) {\r\n        colVel -= (pos - vPos);\r\n      }\r\n      if (distance(pos, vPos) < params.rule3Distance) {\r\n        cVel += vel;\r\n        cVelCount++;\r\n      }\r\n    }\r\n    if (cMassCount > 0) {\r\n      cMass = cMass / cMassCount - vPos;\r\n    }\r\n    if (cVelCount > 0) {\r\n      cVel = cVel / cVelCount;\r\n    }\r\n\r\n    vVel += cMass * params.rule1Scale + colVel * params.rule2Scale + cVel * params.rule3Scale;\r\n\r\n    // clamp velocity for a more pleasing simulation.\r\n    vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\r\n\r\n    // kinematic update\r\n    vPos += vVel * params.deltaT;\r\n\r\n    // Wrap around boundary\r\n    if (vPos.x < -1.0) vPos.x = 1.0;\r\n    if (vPos.x > 1.0) vPos.x = -1.0;\r\n    if (vPos.y < -1.0) vPos.y = 1.0;\r\n    if (vPos.y > 1.0) vPos.y = -1.0;\r\n\r\n    particlesB.particles[index].pos = vPos;\r\n\r\n    // Write back\r\n    particlesB.particles[index].vel = vVel;\r\n  }`;\r\n\r\n  const adapter = await navigator.gpu.requestAdapter();\r\n  const device = await adapter.requestDevice();\r\n  const glslang = await glslangModule();\r\n\r\n  const context = canvas.getContext('gpupresent');\r\n\r\n  // @ts-ignore:\r\n  const swapChain = context.configureSwapChain({\r\n    device,\r\n    format: \"bgra8unorm\"\r\n  });\r\n\r\n  const computeBindGroupLayout = device.createBindGroupLayout({\r\n    bindings: [\r\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: \"uniform-buffer\" },\r\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\r\n      { binding: 2, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\r\n    ],\r\n  });\r\n\r\n  const computePipelineLayout = device.createPipelineLayout({\r\n    bindGroupLayouts: [computeBindGroupLayout],\r\n  });\r\n\r\n  const renderPipeline = device.createRenderPipeline({\r\n    layout: device.createPipelineLayout({ bindGroupLayouts: [] }),\r\n\r\n    vertexStage: {\r\n      module: device.createShaderModule({\r\n        code: glslang.compileGLSL(vertexShaderGLSL, \"vertex\"),\r\n      }),\r\n      entryPoint: \"main\"\r\n    },\r\n    fragmentStage: {\r\n      module: device.createShaderModule({\r\n        code: glslang.compileGLSL(fragmentShaderGLSL, \"fragment\"),\r\n      }),\r\n      entryPoint: \"main\"\r\n    },\r\n\r\n    primitiveTopology: \"triangle-list\",\r\n\r\n    depthStencilState: {\r\n      depthWriteEnabled: true,\r\n      depthCompare: \"less\",\r\n      format: \"depth24plus-stencil8\",\r\n    },\r\n\r\n    vertexInput: {\r\n      vertexBuffers: [{\r\n        // instanced particles buffer\r\n        stride: 4 * 4,\r\n        stepMode: \"instance\",\r\n        attributeSet: [{\r\n          // instance position\r\n          shaderLocation: 0,\r\n          offset: 0,\r\n          format: \"float2\"\r\n        }, {\r\n          // instance velocity\r\n          shaderLocation: 1,\r\n          offset: 2 * 4,\r\n          format: \"float2\"\r\n        }],\r\n      }, {\r\n        // vertex buffer\r\n        stride: 2 * 4,\r\n        stepMode: \"vertex\",\r\n        attributeSet: [{\r\n          // vertex positions\r\n          shaderLocation: 2,\r\n          offset: 0,\r\n          format: \"float2\"\r\n        }],\r\n      }],\r\n    },\r\n\r\n    colorStates: [{\r\n      format: \"bgra8unorm\",\r\n    }],\r\n  });\r\n\r\n  const computePipeline = device.createComputePipeline({\r\n    layout: computePipelineLayout,\r\n    computeStage: {\r\n      module: device.createShaderModule({\r\n        code: glslang.compileGLSL(computeShaderGLSL, \"compute\"),\r\n      }),\r\n      entryPoint: \"main\",\r\n    }\r\n  });\r\n\r\n  const depthTexture = device.createTexture({\r\n    size: { width: canvas.width, height: canvas.height, depth: 1 },\r\n    format: \"depth24plus-stencil8\",\r\n    usage: GPUTextureUsage.OUTPUT_ATTACHMENT\r\n  });\r\n\r\n  const renderPassDescriptor: GPURenderPassDescriptor = {\r\n    colorAttachments: [{\r\n      attachment: undefined,  // Assigned later\r\n      loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\r\n    }],\r\n    depthStencilAttachment: {\r\n      attachment: depthTexture.createView(),\r\n      depthLoadValue: 1.0,\r\n      depthStoreOp: \"store\",\r\n      stencilLoadValue: 0,\r\n      stencilStoreOp: \"store\",\r\n    }\r\n  };\r\n\r\n  const vertexBufferData = new Float32Array([-0.01, -0.02, 0.01, -0.02, 0.00, 0.02]);\r\n  const verticesBuffer = device.createBuffer({\r\n    size: vertexBufferData.byteLength,\r\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\r\n  });\r\n  verticesBuffer.setSubData(0, vertexBufferData);\r\n\r\n  const simParamData = new Float32Array([\r\n    0.04,  // deltaT;\r\n    0.1,   // rule1Distance;\r\n    0.025, // rule2Distance;\r\n    0.025, // rule3Distance;\r\n    0.02,  // rule1Scale;\r\n    0.05,  // rule2Scale;\r\n    0.005  // rule3Scale;\r\n  ]);\r\n  const simParamBuffer = device.createBuffer({\r\n    size: simParamData.byteLength,\r\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n  });\r\n  simParamBuffer.setSubData(0, simParamData);\r\n\r\n  const initialParticleData = new Float32Array(numParticles * 4);\r\n  for (let i = 0; i < numParticles; ++i) {\r\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\r\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\r\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\r\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\r\n  }\r\n\r\n  const particleBuffers = new Array(2);\r\n  const particleBindGroups = new Array(2);\r\n  for (let i = 0; i < 2; ++i) {\r\n    particleBuffers[i] = device.createBuffer({\r\n      size: initialParticleData.byteLength,\r\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    });\r\n    particleBuffers[i].setSubData(0, initialParticleData);\r\n  }\r\n\r\n  for (let i = 0; i < 2; ++i) {\r\n    particleBindGroups[i] = device.createBindGroup({\r\n      layout: computeBindGroupLayout,\r\n      bindings: [{\r\n        binding: 0,\r\n        resource: {\r\n          buffer: simParamBuffer,\r\n          offset: 0,\r\n          size: simParamData.byteLength\r\n        },\r\n      }, {\r\n        binding: 1,\r\n        resource: {\r\n          buffer: particleBuffers[i],\r\n          offset: 0,\r\n          size: initialParticleData.byteLength,\r\n        },\r\n      }, {\r\n        binding: 2,\r\n        resource: {\r\n          buffer: particleBuffers[(i + 1) % 2],\r\n          offset: 0,\r\n          size: initialParticleData.byteLength,\r\n        },\r\n      }],\r\n    });\r\n  }\r\n\r\n  let t = 0;\r\n  return function frame() {\r\n    renderPassDescriptor.colorAttachments[0].attachment = swapChain.getCurrentTexture().createView();\r\n\r\n    const commandEncoder = device.createCommandEncoder({});\r\n    {\r\n      const passEncoder = commandEncoder.beginComputePass();\r\n      passEncoder.setPipeline(computePipeline);\r\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\r\n      passEncoder.dispatch(numParticles);\r\n      passEncoder.endPass();\r\n    }\r\n    {\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n      passEncoder.setPipeline(renderPipeline);\r\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\r\n      passEncoder.setVertexBuffer(1, verticesBuffer);\r\n      passEncoder.draw(3, numParticles, 0, 0);\r\n      passEncoder.endPass();\r\n    }\r\n    device.getQueue().submit([commandEncoder.finish()]);\r\n\r\n    ++t;\r\n  }\r\n}\r\n","let glslang = undefined;\r\nexport default async function() {\r\n  if (glslang !== undefined) return glslang;\r\n  // @ts-ignore\r\n  const glslangModule = await import(/* webpackIgnore: true */ 'https://unpkg.com/@webgpu/glslang@0.0.7/web/glslang.js');\r\n  glslang = await glslangModule.default();\r\n  return glslang;\r\n}\r\n"],"sourceRoot":""}