{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/examples/computeBoids.ts","webpack:///./src/glslang.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","title","description","init","canvas","vertexShaderGLSL","fragmentShaderGLSL","computeShaderGLSL","adapter","navigator","gpu","requestAdapter","device","requestDevice","glslang","swapChain","getContext","configureSwapChain","format","computeBindGroupLayout","createBindGroupLayout","bindings","binding","visibility","GPUShaderStage","COMPUTE","type","computePipelineLayout","createPipelineLayout","bindGroupLayouts","renderPipeline","createRenderPipeline","layout","vertexStage","createShaderModule","code","compileGLSL","source","transform","entryPoint","fragmentStage","primitiveTopology","depthStencilState","depthWriteEnabled","depthCompare","vertexState","vertexBuffers","arrayStride","stepMode","attributes","shaderLocation","offset","colorStates","computePipeline","createComputePipeline","computeStage","renderPassDescriptor","colorAttachments","attachment","undefined","loadValue","g","b","a","depthStencilAttachment","createTexture","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","createView","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","vertexBufferData","Float32Array","verticesBuffer","createBuffer","byteLength","GPUBufferUsage","VERTEX","COPY_DST","setSubData","simParamData","simParamBuffer","UNIFORM","initialParticleData","numParticles","Math","random","particleBuffers","Array","particleBindGroups","STORAGE","createBindGroup","resource","buffer","getCurrentTexture","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","beginRenderPass","setVertexBuffer","draw","defaultQueue","submit","finish","glslangModule","import","default"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,QAIjBlC,EAAoBA,EAAoBmC,EAAI,I,idChF9C,MAAMC,EAAQ,gBACRC,EAAc,4RAKpB,SAAeC,EAAKC,G,yCACzB,MAEMC,EAAmB,uZAWnBC,EAAqB,6GAMrBC,EAAoB,6sEAqFpBC,QAAgBC,UAAUC,IAAIC,iBAC9BC,QAAeJ,EAAQK,gBACvBC,QAAgB,cAKhBC,EAHUX,EAAOY,WAAW,cAGRC,mBAAmB,CAC3CL,SACAM,OAAQ,eAGJC,EAAyBP,EAAOQ,sBAAsB,CAC1DC,SAAU,CACR,CAAEC,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,kBACxD,CAAEJ,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,kBACxD,CAAEJ,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,qBAItDC,EAAwBf,EAAOgB,qBAAqB,CACxDC,iBAAkB,CAACV,KAGfW,EAAiBlB,EAAOmB,qBAAqB,CACjDC,OAAQpB,EAAOgB,qBAAqB,CAAEC,iBAAkB,KAExDI,YAAa,CACXjE,OAAQ4C,EAAOsB,mBAAmB,CAChCC,KAAMrB,EAAQsB,YAAY/B,EAAkB,UAG5CgC,OAAQhC,EACRiC,UAAWD,GAAUvB,EAAQsB,YAAYC,EAAQ,YAEnDE,WAAY,QAEdC,cAAe,CACbxE,OAAQ4C,EAAOsB,mBAAmB,CAChCC,KAAMrB,EAAQsB,YAAY9B,EAAoB,YAG9C+B,OAAQ/B,EACRgC,UAAWD,GAAUvB,EAAQsB,YAAYC,EAAQ,cAEnDE,WAAY,QAGdE,kBAAmB,gBAEnBC,kBAAmB,CACjBC,mBAAmB,EACnBC,aAAc,OACd1B,OAAQ,wBAGV2B,YAAa,CACXC,cAAe,CAAC,CAEdC,YAAa,GACbC,SAAU,WACVC,WAAY,CAAC,CAEXC,eAAgB,EAChBC,OAAQ,EACRjC,OAAQ,UACP,CAEDgC,eAAgB,EAChBC,OAAQ,EACRjC,OAAQ,YAET,CAED6B,YAAa,EACbC,SAAU,SACVC,WAAY,CAAC,CAEXC,eAAgB,EAChBC,OAAQ,EACRjC,OAAQ,cAKdkC,YAAa,CAAC,CACZlC,OAAQ,iBAINmC,EAAkBzC,EAAO0C,sBAAsB,CACnDtB,OAAQL,EACR4B,aAAc,CACZvF,OAAQ4C,EAAOsB,mBAAmB,CAChCC,KAAMrB,EAAQsB,YAAY7B,EAAmB,WAG7C8B,OAAQ9B,EACR+B,UAAWD,GAAUvB,EAAQsB,YAAYC,EAAQ,aAEnDE,WAAY,UAUViB,EAAgD,CACpDC,iBAAkB,CAAC,CACjBC,gBAAYC,EACZC,UAAW,CAAE7E,EAAG,EAAK8E,EAAG,EAAKC,EAAG,EAAKC,EAAG,KAE1CC,uBAAwB,CACtBN,WAZiB9C,EAAOqD,cAAc,CACxCC,KAAM,CAAEC,MAAO/D,EAAO+D,MAAOC,OAAQhE,EAAOgE,OAAQC,MAAO,GAC3DnD,OAAQ,uBACRoD,MAAOC,gBAAgBC,oBASIC,aACzBC,eAAgB,EAChBC,aAAc,QACdC,iBAAkB,EAClBC,eAAgB,UAIdC,EAAmB,IAAIC,aAAa,EAAE,KAAO,IAAM,KAAO,IAAM,EAAM,MACtEC,EAAiBpE,EAAOqE,aAAa,CACzCf,KAAMY,EAAiBI,WACvBZ,MAAOa,eAAeC,OAASD,eAAeE,WAEhDL,EAAeM,WAAW,EAAGR,GAE7B,MAAMS,EAAe,IAAIR,aAAa,CACpC,IACA,GACA,KACA,KACA,IACA,IACA,OAEIS,EAAiB5E,EAAOqE,aAAa,CACzCf,KAAMqB,EAAaL,WACnBZ,MAAOa,eAAeM,QAAUN,eAAeE,WAEjDG,EAAeF,WAAW,EAAGC,GAE7B,MAAMG,EAAsB,IAAIX,aAAaY,KAC7C,IAAK,IAAI1H,EAAI,EAAGA,EA3PK,OA2PeA,EAClCyH,EAAoB,EAAIzH,EAAI,GAAK,GAAK2H,KAAKC,SAAW,IACtDH,EAAoB,EAAIzH,EAAI,GAAK,GAAK2H,KAAKC,SAAW,IACtDH,EAAoB,EAAIzH,EAAI,GAAK,GAAK2H,KAAKC,SAAW,IAAO,GAC7DH,EAAoB,EAAIzH,EAAI,GAAK,GAAK2H,KAAKC,SAAW,IAAO,GAG/D,MAAMC,EAAkB,IAAIC,MAAM,GAC5BC,EAAqB,IAAID,MAAM,GACrC,IAAK,IAAI9H,EAAI,EAAGA,EAAI,IAAKA,EACvB6H,EAAgB7H,GAAK2C,EAAOqE,aAAa,CACvCf,KAAMwB,EAAoBR,WAC1BZ,MAAOa,eAAeE,SAAWF,eAAeC,OAASD,eAAec,UAE1EH,EAAgB7H,GAAGqH,WAAW,EAAGI,GAGnC,IAAK,IAAIzH,EAAI,EAAGA,EAAI,IAAKA,EACvB+H,EAAmB/H,GAAK2C,EAAOsF,gBAAgB,CAC7ClE,OAAQb,EACRE,SAAU,CAAC,CACTC,QAAS,EACT6E,SAAU,CACRC,OAAQZ,EACRrC,OAAQ,EACRe,KAAMqB,EAAaL,aAEpB,CACD5D,QAAS,EACT6E,SAAU,CACRC,OAAQN,EAAgB7H,GACxBkF,OAAQ,EACRe,KAAMwB,EAAoBR,aAE3B,CACD5D,QAAS,EACT6E,SAAU,CACRC,OAAQN,GAAiB7H,EAAI,GAAK,GAClCkF,OAAQ,EACRe,KAAMwB,EAAoBR,gBAMlC,IAAI/F,EAAI,EACR,OAAO,WACLqE,EAAqBC,iBAAiB,GAAGC,WAAa3C,EAAUsF,oBAAoB5B,aAEpF,MAAM6B,EAAiB1F,EAAO2F,qBAAqB,IACnD,CACE,MAAMC,EAAcF,EAAeG,mBACnCD,EAAYE,YAAYrD,GACxBmD,EAAYG,aAAa,EAAGX,EAAmB7G,EAAI,IACnDqH,EAAYI,SAjTK,MAkTjBJ,EAAYK,UAEd,CACE,MAAML,EAAcF,EAAeQ,gBAAgBtD,GACnDgD,EAAYE,YAAY5E,GACxB0E,EAAYO,gBAAgB,EAAGjB,GAAiB3G,EAAI,GAAK,IACzDqH,EAAYO,gBAAgB,EAAG/B,GAC/BwB,EAAYQ,KAAK,EAzTA,KAyTiB,EAAG,GACrCR,EAAYK,UAEdjG,EAAOqG,aAAaC,OAAO,CAACZ,EAAea,aAEzChI,Q,yUCvUN,IAAI2B,OAAU6C,EACC,e,yCACb,QAAgBA,IAAZ7C,EAAuB,OAAOA,EAElC,MAAMsG,QAAsBC,OAAiC,0DAE7D,OADAvG,QAAgBsG,EAAcE,UACvBxG","file":"computeBoids-bbae37.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","import glslangModule from '../glslang';\n\nexport const title = 'Compute Boids';\nexport const description = 'A GPU compute particle simulation that mimics \\\n                            the flocking behavior of birds. A compute shader updates \\\n                            two ping-pong buffers which store particle data. The data \\\n                            is used to draw instanced particles.';\n\nexport async function init(canvas: HTMLCanvasElement) {\n  const numParticles = 1500;\n\n  const vertexShaderGLSL = `#version 450\n  layout(location = 0) in vec2 a_particlePos;\n  layout(location = 1) in vec2 a_particleVel;\n  layout(location = 2) in vec2 a_pos;\n  void main() {\n    float angle = -atan(a_particleVel.x, a_particleVel.y);\n    vec2 pos = vec2(a_pos.x * cos(angle) - a_pos.y * sin(angle),\n            a_pos.x * sin(angle) + a_pos.y * cos(angle));\n    gl_Position = vec4(pos + a_particlePos, 0, 1);\n  }`;\n\n  const fragmentShaderGLSL = `#version 450\n  layout(location = 0) out vec4 fragColor;\n  void main() {\n    fragColor = vec4(1.0);\n  }`;\n\n  const computeShaderGLSL = `#version 450\n  struct Particle {\n    vec2 pos;\n    vec2 vel;\n  };\n\n  layout(std140, set = 0, binding = 0) uniform SimParams {\n    float deltaT;\n    float rule1Distance;\n    float rule2Distance;\n    float rule3Distance;\n    float rule1Scale;\n    float rule2Scale;\n    float rule3Scale;\n  } params;\n\n  layout(std140, set = 0, binding = 1) buffer ParticlesA {\n    Particle particles[${numParticles}];\n  } particlesA;\n\n  layout(std140, set = 0, binding = 2) buffer ParticlesB {\n    Particle particles[${numParticles}];\n  } particlesB;\n\n  void main() {\n    // https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\n\n    uint index = gl_GlobalInvocationID.x;\n    if (index >= ${numParticles}) { return; }\n\n    vec2 vPos = particlesA.particles[index].pos;\n    vec2 vVel = particlesA.particles[index].vel;\n\n    vec2 cMass = vec2(0.0, 0.0);\n    vec2 cVel = vec2(0.0, 0.0);\n    vec2 colVel = vec2(0.0, 0.0);\n    int cMassCount = 0;\n    int cVelCount = 0;\n\n    vec2 pos;\n    vec2 vel;\n    for (int i = 0; i < ${numParticles}; ++i) {\n      if (i == index) { continue; }\n      pos = particlesA.particles[i].pos.xy;\n      vel = particlesA.particles[i].vel.xy;\n\n      if (distance(pos, vPos) < params.rule1Distance) {\n        cMass += pos;\n        cMassCount++;\n      }\n      if (distance(pos, vPos) < params.rule2Distance) {\n        colVel -= (pos - vPos);\n      }\n      if (distance(pos, vPos) < params.rule3Distance) {\n        cVel += vel;\n        cVelCount++;\n      }\n    }\n    if (cMassCount > 0) {\n      cMass = cMass / cMassCount - vPos;\n    }\n    if (cVelCount > 0) {\n      cVel = cVel / cVelCount;\n    }\n\n    vVel += cMass * params.rule1Scale + colVel * params.rule2Scale + cVel * params.rule3Scale;\n\n    // clamp velocity for a more pleasing simulation.\n    vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\n\n    // kinematic update\n    vPos += vVel * params.deltaT;\n\n    // Wrap around boundary\n    if (vPos.x < -1.0) vPos.x = 1.0;\n    if (vPos.x > 1.0) vPos.x = -1.0;\n    if (vPos.y < -1.0) vPos.y = 1.0;\n    if (vPos.y > 1.0) vPos.y = -1.0;\n\n    particlesB.particles[index].pos = vPos;\n\n    // Write back\n    particlesB.particles[index].vel = vVel;\n  }`;\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const glslang = await glslangModule();\n\n  const context = canvas.getContext('gpupresent');\n\n  // @ts-ignore:\n  const swapChain = context.configureSwapChain({\n    device,\n    format: \"bgra8unorm\"\n  });\n\n  const computeBindGroupLayout = device.createBindGroupLayout({\n    bindings: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: \"uniform-buffer\" },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\n      { binding: 2, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\n    ],\n  });\n\n  const computePipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [computeBindGroupLayout],\n  });\n\n  const renderPipeline = device.createRenderPipeline({\n    layout: device.createPipelineLayout({ bindGroupLayouts: [] }),\n\n    vertexStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(vertexShaderGLSL, \"vertex\"),\n\n        // @ts-ignore\n        source: vertexShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"vertex\"),\n      }),\n      entryPoint: \"main\"\n    },\n    fragmentStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(fragmentShaderGLSL, \"fragment\"),\n\n        // @ts-ignore\n        source: fragmentShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"fragment\"),\n      }),\n      entryPoint: \"main\"\n    },\n\n    primitiveTopology: \"triangle-list\",\n\n    depthStencilState: {\n      depthWriteEnabled: true,\n      depthCompare: \"less\",\n      format: \"depth24plus-stencil8\",\n    },\n\n    vertexState: {\n      vertexBuffers: [{\n        // instanced particles buffer\n        arrayStride: 4 * 4,\n        stepMode: \"instance\",\n        attributes: [{\n          // instance position\n          shaderLocation: 0,\n          offset: 0,\n          format: \"float2\"\n        }, {\n          // instance velocity\n          shaderLocation: 1,\n          offset: 2 * 4,\n          format: \"float2\"\n        }],\n      }, {\n        // vertex buffer\n        arrayStride: 2 * 4,\n        stepMode: \"vertex\",\n        attributes: [{\n          // vertex positions\n          shaderLocation: 2,\n          offset: 0,\n          format: \"float2\"\n        }],\n      }],\n    },\n\n    colorStates: [{\n      format: \"bgra8unorm\",\n    }],\n  });\n\n  const computePipeline = device.createComputePipeline({\n    layout: computePipelineLayout,\n    computeStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(computeShaderGLSL, \"compute\"),\n\n        // @ts-ignore\n        source: computeShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"compute\"),\n      }),\n      entryPoint: \"main\"\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height, depth: 1 },\n    format: \"depth24plus-stencil8\",\n    usage: GPUTextureUsage.OUTPUT_ATTACHMENT\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [{\n      attachment: undefined,  // Assigned later\n      loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n    }],\n    depthStencilAttachment: {\n      attachment: depthTexture.createView(),\n      depthLoadValue: 1.0,\n      depthStoreOp: \"store\",\n      stencilLoadValue: 0,\n      stencilStoreOp: \"store\",\n    }\n  };\n\n  const vertexBufferData = new Float32Array([-0.01, -0.02, 0.01, -0.02, 0.00, 0.02]);\n  const verticesBuffer = device.createBuffer({\n    size: vertexBufferData.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n  verticesBuffer.setSubData(0, vertexBufferData);\n\n  const simParamData = new Float32Array([\n    0.04,  // deltaT;\n    0.1,   // rule1Distance;\n    0.025, // rule2Distance;\n    0.025, // rule3Distance;\n    0.02,  // rule1Scale;\n    0.05,  // rule2Scale;\n    0.005  // rule3Scale;\n  ]);\n  const simParamBuffer = device.createBuffer({\n    size: simParamData.byteLength,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n  simParamBuffer.setSubData(0, simParamData);\n\n  const initialParticleData = new Float32Array(numParticles * 4);\n  for (let i = 0; i < numParticles; ++i) {\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\n  }\n\n  const particleBuffers = new Array(2);\n  const particleBindGroups = new Array(2);\n  for (let i = 0; i < 2; ++i) {\n    particleBuffers[i] = device.createBuffer({\n      size: initialParticleData.byteLength,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\n    });\n    particleBuffers[i].setSubData(0, initialParticleData);\n  }\n\n  for (let i = 0; i < 2; ++i) {\n    particleBindGroups[i] = device.createBindGroup({\n      layout: computeBindGroupLayout,\n      bindings: [{\n        binding: 0,\n        resource: {\n          buffer: simParamBuffer,\n          offset: 0,\n          size: simParamData.byteLength\n        },\n      }, {\n        binding: 1,\n        resource: {\n          buffer: particleBuffers[i],\n          offset: 0,\n          size: initialParticleData.byteLength,\n        },\n      }, {\n        binding: 2,\n        resource: {\n          buffer: particleBuffers[(i + 1) % 2],\n          offset: 0,\n          size: initialParticleData.byteLength,\n        },\n      }],\n    });\n  }\n\n  let t = 0;\n  return function frame() {\n    renderPassDescriptor.colorAttachments[0].attachment = swapChain.getCurrentTexture().createView();\n\n    const commandEncoder = device.createCommandEncoder({});\n    {\n      const passEncoder = commandEncoder.beginComputePass();\n      passEncoder.setPipeline(computePipeline);\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\n      passEncoder.dispatch(numParticles);\n      passEncoder.endPass();\n    }\n    {\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(renderPipeline);\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\n      passEncoder.setVertexBuffer(1, verticesBuffer);\n      passEncoder.draw(3, numParticles, 0, 0);\n      passEncoder.endPass();\n    }\n    device.defaultQueue.submit([commandEncoder.finish()]);\n\n    ++t;\n  }\n}\n","let glslang = undefined;\nexport default async function() {\n  if (glslang !== undefined) return glslang;\n  // @ts-ignore\n  const glslangModule = await import(/* webpackIgnore: true */ 'https://unpkg.com/@webgpu/glslang@0.0.7/web/glslang.js');\n  glslang = await glslangModule.default();\n  return glslang;\n}\n"],"sourceRoot":""}